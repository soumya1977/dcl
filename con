                             



Building a New Charon Server and Renaming an existing open vms Server



Author: Saumya Ranjan Samantaray








































INDEX


Purpose of the document					Page 4

Stakeholders							Page 4

BackGround Information					Page 4

Application Architecture					Page 5

Purpose of knowing the PVS/ILVS App			Page 6

Overview of PVS/ILVS					Page 7

Obtaining Server Hardware				Page 8

Hardware Configuration					Page 10

Windows Server Disks					Page 11

Server I.P Address Information and tasks		Page 11

Testing I.P information from Windows			Page 12

The Charon Software Installation				Page 13

The Charon Config File					Page 15

The Network Interface card and Charon			Page 16

Building Disks from USB Backup				Page 17

Building a Charon disk using MKDisk Utility		Page 18

Bullding a Charon disk using Windows			Page 19

Configuring the VMS environment for Decnet		Page 21

Configuring the VMS environment for UCX		Page 22

VMS Startup Files						Page 23

Decnet Application Links					Page 25

UAF Proxies							Page 26

Decnet Objects						Page 26

PVS/ILVS Master Slave Rules				Page 28

Applications Logicals					Page 30

Starting the PVS and ILVS Applications			Page 31

Example of VOBMEND 					Page 32

Example of RUNPVS Master 				Page 34

Example of PVS Processes				Page 39

Example of ILVS Processes				Page 39

Master and Slave VMS System Processes		Page 40

Building PVS for the first time				Page 42

Appendix A – PVS / ILVS Building Blocks		Page 45

Appendix B – Searching for Hardcoded			Page 52






























Purpose of the Document

The pupose of this document is to explain the process of building a PVS / ILVS application server from the bottom up.

The purpose of this document is not a Openvms system administration manual. Knowledge of VMS and familiarilty of the PVS and ILVS applications is assumed throughout.


Stakeholders

•	OpenVMS and Charon System Administration
•	PVS and ILVS administrative support team
•	TCS management 
•	Windows Server Support team
•	I.T Networks
•	Stromasys support team and Sales Representative


Background Information

The Jaguar Landrover PVS and ILVS applications run within a Production and Test environment at the Halewood Plant in Liverpool.  Currently there are two nodes or physical servers per environment. Each pair of servers are housed in different physical data-centre locations within the JLR plant.

Diagram 1 - Servers within the JLR Data Centre locations.

Halewood HQ Data entre		North Factory Data Centre

Live Production HWPVS1                                 Secure Subnet HWPTST
                                                  

Live Production HWPVS2		                  Secure Subnet HWQTST
                                                   





The PVS ILVS Architecture

This information is covered within other application documents however the PVS ILVS architecture is made up of the following components:

•	IBM Server Hardware
•	Windows 2003k
•	Charon VAX 4000 emulator
•	VAX/VMS 6.2
•	Decnet and UCX/TCPIP
•	Macro32/PCPL/Pascal

Note
Full PVS ILVS architecture information, concerning the VMS build on Charon-VAX, is provided from a System Administration viewpoint in the HWPVS Systems document located in PVS-ILVS section of Sharepoint.


The PVS and ILVS Live Production application environment interfaces with a host of other JLR  applications. An example of the applications that PVS and ILVS interface with are:

•	Opcon 	– 	All the Parts fitted in the Car
•	CMMS 	– 	Warehouse of all parts needed for all car builds
•	MCIS 	-  	Material Call in Server
•	FLAGS 	-	Fault Logging Analytical and Graphical
•	PBS 	- 	Painted Body Storage
•	ASRS	-	Automated Storage and Receovery System
•	QLS	-	Quality Reporting at Trim & Final

Note
Full PVS ILVS interface information is provided in the Appreciation document located in PVS-ILVS section of Sharepoint.








Purpose of the knowing the PVS/ILVS Build

The JLR business would like to take interface conditions found within the PVS and ILVS Production environment and replicate these conditions in a secure and controlled PVS and ILVS Test environment.

Currently the PVS Test environment is housed within a restricted network. This test environment is ring fenced away from other test applications such as the test version of the Opcon application. The business requires the PVS and ILVS test environment to be on a network segment where it would be able to communicate with other test applications housed in other locations with the company. This would enable the business to test interfaces between these applications.   

In order to accomplish this the current PVS ILVS test environment will not be altered in any way initially. Instead a PVS ILVS development environment will be created to test all requirements of the business for inclusion into the corporate network.

Diagram 2 – Secure Subnets at Halewood, Castle Bromwich and Solihull


 


Overview of the PVS ILVS Development Environment Plan

This activity needs to check if the change the Decnet Node name and UCX TCPIP Host name HWPVS1 and HWPVS2, in a development environment, would present a problem to the PVS and ILVS application. Historically a number of different names have been used within the application such as HWPVSA,B,C,D and E. The test seeks to break this convention and change to a name that has never been used before. The logic being that there will not have been any code created beforehand to support these new names in a hardcoded format within VMS or application software. 

Test the development architecture from the bottom up starting from hardware, operating system, network, third party products, program language and application software including complied code. This test will have the following benefits:

•	Ensure that there are no harcoded nodename entries in system or application dependant files.

•	Ensure that administrators of the PVS and ILVS application have a clear understanding of requirements to rebuild the architecture.


Place the renamed servers HWPTST and HWQTST, in the first instance,  into a controlled network environment with the PVS and ILVS Test servers called HWPVS1 and HWPVS2. This will simulate an unwanted scenario where PVS Production and Test servers appear on the same network by accident.
 
Perform tests to prevent the Development servers from attaching to terminal servers, ports and common LAT ports. This will simulate preventing the test servers from attaching to LAT and Decserver ports used in the Production environment. 

Perform rudimentary testing of the PVS and ILVS application once the development servers have been built to the application level.

Perform a Master and Slave transitional test once the Development builds have been completed up to an application stage.

Check if normal and usual system processes and batch jobs are running. 

PVS and ILVS network architecture, especially transactions between Master and Slave, have been developed using the Decnet protocol. The following commands will show the 4 x links on a fully configured and running PVS /ILVS config.

•	MC NCP SH KN LINKS

Nevertheless significant testing will also be completed using the UCX TCP/IP protocol. UCX is used during certain PVS startup procedures.


Obtaining Server Hardware

In order to obtain equipment for the development build, a request was made to the TCS management team based at Halewood for the use of two racked servers. The following requirements were attached to the request:

•	One server would be located in each data-centre location within the JLR site. 
•	Each server would be have the ability to attach to a network through Network Interface Card hardware.
•	Each server would be built to the site Windows server standards.

Note
The Charon software runs upon a host of Windows versions including 64 bit Windows.  The PVS ILVS application has been throroughly tested using this version of Charon software which runs on 64 bit architecture. It is logical for this test to replicate conditions found within the PVS ILVS Production and Test environments. This environment runs Windows 2003 Server upon IBM Server hardware. The current version of Windows server environment will be going through the following changes over the time of writing this document:

•	Windows 2003 Server Patching.
•	Windows 2008 Server Upgrade.
•	VMware
•	Storage Area Networks (SAN)

Note
The current version of Charon “version” running upon Production is out of date and out of support due to the age of the software. The Production system will need to be upgraded to the current supported version XM XL. 

Note
The test of the PVS ILVS application upon Windows 7 does have useful connotations. A working development version of the PVS ILVS software could be hosted upon a desktop computer or laptop. This would provide a cheaper option to the server development test approach.  For training purposes the Freeware version of Charon could be installed on a desktop environment. This version only allows 2 x disks to be configured and no config file however basic tests have shown that PVS  and ILVS can be configured to run on a single disk if logicals are defined correctly.

A request was made to the Halwood based I.T networks team for I.P addresses to enable the development servers to join the existing PVS and ILVS test environment. Two I.P addresses were provided for the 10.0.0 network including 10.0.0.24 HWPTST and 10.0.0.25 HWQTST. The existing servers within the network are 10.0.0.5 HWPVS1 and 10.0.0.6 HWPVS2. In the meantime preparations were continuing for a Halewood secure subnet controlled by the 10.230.2.65 and as explained in diagram 2.

A request was made to Charon software providers Stromasys to provide a temporary license for the Charon emulation software. A license key was provided for VAX 3900 emulation.  Although two keys were needed in order to fully replicate the PVS ILVS Test environment only one license key could be secured.


Hardware Configuration

The servers provided for the test by the TLS Windows Server team based at Halewood were IBM servers.

The Windows software is Windows 2003 Server.

Future Charon builds may involve virtualised hardware and software such as VMware.


Diagram 3 – The physical IBM server hardware, CPU and Memory

 








Disks from a Windows Perspective

Physical disks contained withinthe IBM server were built and constructed by the Windows Server team. Physical disks have been mirrored for the C: partition and striped with parity for the F: and G: partitions.


Server I.P Address Information and tasks

This information was provided by the I.T Network team at Halewood.

The following I.P address information was provided by the network team.

•	10.0.0.24 and 25 I.P addresses
•	255.255.255.0 subnet mask
•	10.0.0.1 gateway

The network team needed to “patch” the new test servers into the current 10.0.0 network. 

Note
Patch means that the network team run a Category 5 twisted pair network cable with RJ45 connectors from the network interface card in the server to the switch controlling the 10.0.0 network.

The development server I.P address allocation is as follows:

•	1 x server HWTST1 located in the Halwood JLR management building third floor data centre given I.P address 10.0.0.24.

•	1 x server HWTST2 located in the Halewood Factory called “North Data Centre” given I.P address 10.0.0.25.












To Test the I.P information from Windows:

Enter Windows 2003 login / select TCPIP and click properties.

Right Click Network connections and insert the I.P address information received from the Network team into  TCPIP properties. Once complete save information.

From the Start command/ Click on Run/Type in CMD to bring up a Command Window.

Ping another server on the network e.g 10.0.0.5/6. The other server on the network should respond to the ping with a message similar to the following:

•	Reply from 10.0.0.5: bytes=32 time=8ms TTL=252

At this point the network team have successfully connected the server network interface card  to the correct network switch. Other servers within that network e.g 10.0.0.5 are responding.


Diagram 4 – Checking that the Network Interface Card is functioning
 
 

The Charon Software Installation

The Charon software required to build the Production and Test environments for PVS and ILVS resides under the L: network drive and under the System-F folder. This software emulated the VAX 4000.

The Charon software used to build the Development environment emulates the VAX 3900. This XM XL software version is the most up to date version currently produced by Stromasys. Steps will be taken to ensure that the version of Charon controlling the PVS/ILVS production environment runs at the same version as the Test environment. 

The opinion of the document creator is; the difference in software levels did not adversely effect the testing in this case.

Note
A full explanation of the Charon installation steps can be found within PVS ILVS architecture documentation found in the PVS ILVS section of Sharepoint.

Once installed the following sub applications will probably be used during the configuration of the Charon environment.

The Charon Launcher will allow the manipulation/edit/change of the configuration file and the application can also be used to test the configuration file after any changes. 


The Charon Log Monitor is useful if the launcher fails to start VMS. In unison the administrator should review details in the Windows Server Event Viewer application.

There is a Mkdisk utility which enables the creation of a virtual disk x.vdisk which is used as a VMS disk once the OS has booted. This document also discusses the manual creation of a virtual disk.

Network Control Center will check if the Network Interface is correctly configured for Charon and VMS. VMS must control the NIC in its entirety.












Diagram 5 – Setting up the Network Interface Card for Charon

 

Note that the TCPIP check box setting in the diagram 5 is not selected. The Charon-VAX software must own the physical network interface card. 


Diagram 6 – The Charon-VAX Network Interface Card Test Utility

 

SCSI check is a valuable tool to ensure that any hardware devices attached to the server are properly configured. This is especially useful in terms of tape drives attached to the SCSI bus. The utility will show drives that can actually be used. If the configuration file failed to setup tape drives then they will not be displayed in the SCSI utility.


The Charon-VAX Configuration File

For a licensed copy of Charon-VAX a config file is provided with the software that configures memory, logs, data, disks and the network. 

For the Development configuration the config file is located under  C:\program Files (x86)\CHARON\Build_14404\x86\mv3k196. 

The log file is configured as follows:
 	
set session log="f:\charon_logs\mv3k196.log" log_method="overwrite"

The following will keep the time going once it has been set and even if the emulator is not running.

set toy container="f:\charon_data\mv3k196.dat"

The following sets up flash rom:

set rom container="f:\charon_rom\mv3k196.rom"

The following sets up the size of memory to be used within the emulator

set ram size=128

The following sets up the three disks required for the Development test

load virtual_scsi_disk/chscsi dka0 scsi_bus=pka scsi_id=0
load virtual_scsi_disk/chscsi dka100 scsi_bus=pka scsi_id=1
load virtual_scsi_disk/chscsi dka200 scsi_bus=pka scsi_id=2

The following sets up the network interface connection with the interface used by the VMS emulation.

load ndis5_chpack_port/chnetwrk eza_0 interface="Broadcom NetXtreme Gigabit Ethernet #2"

set eza interface=eza_0

The description of the Network Interface Card in the Charon-VAX configuration file must match the description of the card in Windows.

The following sets up a physical tape drive connection through Charon-VAX and allows the drive to be used by VMS. 

load physical_scsi_device pka_5 scsi_bus=pka scsi_id=5
set pka_5 container="\\.\Tape0"

A virtual tape drive using a container file similar to a virtual disk can also be used in a Charon-VAX configuration.


The Network Interface Card (NIC) and Charon

The Windows 2003k server network software should be configured for Charon. This can be done manually or via the Charon automated network interface preparation software called Charon Network Control Centre.

This software can be found from the Start/Charon menu.

In the Charon architecture the VMS environment will need to control the network card therefore all Windows management of the physical network card housed in the IBM server must be disabled.

The most successful method for setting up a Network Interface Card that will be used by Charon is in the following way.

•	Manually disable all usage on the NIC.
•	Right Click Network Connection
•	Disable everthing (May require a reboot)
•	Ensure that the only checked item is the Charon controller 

In the Diagram 5 all the software on the Network interface Card has been removed or disabled except the Charon drivers. This includes TCPIP. TCPIP has not been uninstalled due to the fact that this may be needed to test the NIC at the Windows level. The TCPIP must  remain unchecked for VMS to be able to manage the NIC.

Enter the Charon Network Control Centre utility and test the network interface. Charon will confirm that the network card is setup correctly.






Building disks from USB Backup

Building the disks for a Charon installation may involve two scenarios especially if the system is being copied from another VMS system.

If the VMS system has copies of the disk containers on USB key then the following procedure should be followed:

•	There will be a Windows disk partition called F: or G: on the server.

•	Ensure that there is sufficient space on the partition in order to copy the disks from the USB key to the partition. In a Production environment the F: or G: partition should be Raid protected or presentated from a Storage Area Network (SAN) striped with parity or mirrored.

•	Create a folder called Charon_disks under the provided partition. This will be used as the folder containing the Charon disks on Windows.

•	Create a folder called Charon_logs under the provided partition. This folder will be used for storing the Charon logfiles.

•	Create a folder called Charon_data under the provided partition. This folder will be used to hold the data from the Charon software.

•	Insert the USB key and copy the disk files from the USB key to the Charon disk directory.

•	Update the Charon disk config file and insert the disk information. If there are multiple disks, such as is the case with the PVS and ILVS system build,  then place each disk on separate lines of the config file.

Please refer to the section of the document detailing the setup of the Charon Config file used for the PVS ILVS Development environment. 


Building a Charon Disk from scratch using Charon MKdisk Utility

•	Enter the Charon MKdisk utility from the Start/Charon menu
•	Choose the VAX option under select system.
•	Choose the “All Controllers” option in the next Window.
•	Under “Select disk type” choose the type of disk to build e.g. “RZ” and size. If a disk is required which is much bigger than the choices provided in the dropdown menu then the disk may have to be built manually.
•	Select Create Disk and the program will request notification concerning where the disk should be saved i.e directory location. The disk file can be renamed at this point e.g RZ28.vdsk becomes dka100.vdsk.
•	Once the progress bar has completed the empty disk can be used.
•	The new disk will need to be entered into the configuration file before it can be used or seen within VMS.
•	At this point a VMS saveset could be restored to the disk.


Building a Charon Disk from Scratch using Windows

The first task would be to backup the VMS disk to a saveset (a VMS style ZIP) and then FTP these savesets disks to a USB key. 

1.	On VMS> Backup/image dka0: dka0.bck/sav

2.	FTP the dka0.bck to the server containing the Charon build. Ensure that the FTP is binary so that the saveset is copied in the ascii format.

At the end of the VMS build the administrator will copy these savesets onto a disk and then unpack the saveset onto the new disk created in Windows. 

1.	Right Click My computer / manage.

2.	Disk Management / highlight the disk where the Charon disk will be created.

3.	Right click disk management / Create VHD.

4.	Create the virtual disk location – box appears.

5.	Browse for where the disk will be located and name it – don’t worry about vdisk extention at this stage.

6.	Create the disk Fixed Size and in Virtual hard disk size use drop down menu to select GB. Then enter size you want.

7.	At the bottom of the computer management window you will see “Creating Virtual Disk” progress bar.

8.	 New disk will be “unknown” – Highlight it – Right Click on area where it says “unknown” and “init” disk. Make sure initialize box has ticked disk.


9.	Use default mbr partition style.

10.	Disk will change from “unknown” to Basic format.

11.	Right Click disk and select “New Simple Volume” .

12.	Click next and do not select a drive letter.

13.	Click next until finish.

14.	Right click disk and format it.

15.	Right click left hand side of deisk and chose detach

16.	Find disk in Windows Explorer – right click it and rename the extention to vdisk.

17.	Run the Charon launcher, edit the Charon configuration file, add the new disk, save the document and run the launcher.

Diagram 7 - Charon Booting to the Chevron

18.	At the chevron prompt >>>sh dev

This will show a list of disks that have been configured successfully in Windows and configured successfully through Charon-VAX. 

19.	Boot VMS – If this is the first time VMS has been booted then Charon will have provided an example boot disk. This disk will be enough to boot VMS and configure a proper disk with company information.

20.	Check that you can see the new disk e.g dka600 exists.

21.	From VMS> Initialise dka600: name

22.	FTP the saveset from Windows again using the Binary option.

23.	Once the file can be seen in VMS check that the attributes of the file show an indexed file not sequential. Further check that the file is in the right format using the backup/lis dka0.bck/sav command in order to list the contents of the saveset. If the file is improperly formatted then the command will fail.

24.	If the saveset is improperly formatted then the file may be in blocks of 512 bytes whereas a saveset will need to be in block sizes of 8192 bytes. In order to format the file correctly type the following;

Set file/att=(rfm:fix,mrd:8192,lrl=8192,org=seq,rat=none) dka0.bck



Configuring the VMS environment for Decnet

Change the Decnet Nodename and address within the Network Control Protocol

•	MC NCP DEF EXEC 38.114 NAME HWPTST

Decnet will need to be stopped and restarted in order for the change to take effect.

If the Decnet address has been changed then the the SCSYSTEMID will need to be changed within SYSGEN. The SCSSYSTEMID equals the Decnet Network number x 1028 + the network membership number. Therefore the SCSYSTEMID in the example = (38*1028)+114= 39026

Change the SCSYSTEM ID and SCSNODE in SYSGEN via the following method.

•	Edit the sys$system:modparams.dat  and place the new setting in the file.

•	Run sys$update:autogen savparams setparams nofeedback

SCSYSTEMID and SCSNODE are not dynamic parameters therefore the system will need to be rebooted in order for the changes to take effect. Once the system has been rebooted test the parameters:

•	MC SYSGEN SH SCSNODE








Configuring the VMS environment for TCPIP – UCX

If the Decnet node name was changed also change the UCX host name.  If the I.P address will also change then the following command can be run.

-	Set Host HWPTST /address=10.0.0.24

It is also a good idea to change the IP config information within the sys$manager:ucx$config utility using option (1) for Core information and then oprion (4) for Interfaces.

If the routing information has changed ensure that the new gateway is in the routing tables.

-	Set route/default/perm/gateway=10.0.0.1

The Test PVS/ILVS environments will soon be changed to I.P 10.230.2.70/71 for the host tables,  gateway 10.230.2.65 for the routing tables and subnet mask 255.255.255.192.
















VMS Startup Files
VMS sys$manager:sy*.com files will setup the environment as soon as the boot commands is issued at the >>> chevron prompt e.g. >>>B DKA100 which boots the DKA100 disk as the VMS system disk. 

For a PVS build ensure that sys$manager:systartup_vms.com starts the following:
•	Sys$manager:startnet = Starting DECNET required for PVS/ILVS interactions with Master and Slave.
•	Sys$manager:ucx$startup = Required for the PVS environment. It may be wise to submit this job to a batch queue rather than allowing it to run interactively. If there is an issue with UCX then it could take 30 minutes to time out.
•	Mounting the disks

o	First setup in the Charon config file
o	Configured by Charon
o	Seen at the >>> level when the Charon Launcher is started
o	If all is true then the disk can be booted from if it contains an image of VMS. For a PVS build the disk will need to be an image copy of a complete PVS system containing all elements of the Operating System, layered products and application files. 

Note
This document makes the assumption correct or incorrect that the administrator building the PVS/ILVS system, has an image copy of the PVS/ILVS system disk, the PVS application disk and the ILVS application disk. 

Modify sys$manager:*.com;0 files and search for any references to the old  hardcoded system names. There may need to a general logical setup to manage hardcoded node name references just in case they are not all found. This logical will need to be defined before the disks are mounted.
•	Define/sys/exec this_node ‘’f$getsyi(nodename)’

Then the reference can be used within the com files to help boot this system.

•	Mou/noass/norebuild/sys ‘this_node’$dka0 PVS

All com files should be free of hardcoded system names. Most VMS System Administrators comply with this unofficial rule because a physical reference will only occur once throughout all com files. This will make it easier to virtualise a test environment in the future.

List of COM files examined for system names

COM, DAT, LIS and files named *HWPVS1* or *HWPVS2*

VMS Startups - Logicals which may be an issue

The administrator will need to go through all of the procedures that sys$manager:systartup_PVS.com and sys$manager:systartup_ILVS.com call using a search for “@” or a search for “submit”. By the end of the search none of the logicals below should contain the old node names.

Note which logicals contain a reference to the “other” server in a Master / Slave two node configuration e.g HWPVS1 and HWPVS2. If the administrator is logged into HWPVS1 then the “other” node is HWPVS2. These logicals will need to be changed to reference the new “other server e.g HWPVS2.

-	"DPXNODE" = "HWPVS2"
-	"PVSNODE" = "HWPVS1"
-	"SYS$NODE" = "HWPVS1::
-	"FORCESLAVE" = "HWPVS2::"TASK=PVSFORCE""
-	"PVSDUPTASK" = "HWPVS2::"TASK=PVSDUPLEX""
-	"PVSLINKOFFTASK" = "HWPVS2::"TASK=PVSLINKOFF""
-	PVSLINKONTASK" = "HWPVS2::"TASK=PVSLINKON"
-	"PVSMASTERTASK" = "HWPVS2::"TASK=PVSMASTER""
-	  "PVSREMOTE" = "HWPVS2"
-	  "PVSSLAVETASK" = "HWPVS2::"TASK=PVSSLAVE""
-	  "PVSWATTASK" = "HWPVS2::"TASK=PVSWATCH""



Note
The above logicals are exact logical definitions required by a PVS configuration in order to make duplexing work between the Master and Slave servers. If they are not defined then Master and Slave interactions will fail.
It would be a logical assumption by a PVS/VMS administrator to make the “other” node or DPXNODE the same as the PVSNODE in order to trick Decnet into making a single node PVS configuration a Master. In testing this configuration failed.
 
Decnet Application Links

PVS /ILVS uses Decnet links to transport transactions from the Master to the Slave. An example of the display returned via a NCP SH KN LINKS command if the links are correctly is as follows:

Link   Node           PID       Process     Remote link  Remote user

8206   38.114(HWPTST) 0000027E  H$WATCHDOG  8562         ILVS_WDNET
8207   38.114(HWPTST) 00000282  H$DUPLEX    8563         ILVS_DPXHDLE
8209   38.114(HWPTST) 00000279  09_Watchdog 8565         PVSWATCH
8211   38.121(HWQTST) 0000020F  REMACP      8210         WELLIOTT

These links will not be present until a Master / Slave connection has been made via the Duplex and Watchdog links in PVS and ILVS applications. Links can however be tested in order to ensure that Decnet links are working between servers with Decnet Nodenames and addresses. A common way of testing a Decnet link is via the following method:

$ Set Host othernodename = Log back into the same node via Decnet.
$ MC NCP SH KN LINKS = Will show a REMACP process showing a remote links has been established.




User Acceptance File (UAF) Proxies

In order to achieve a Master and Slave connection the following UAF proxies need to be configured on both servers.

Whatever the remote node is HWQTST::* * (D)

Whatever the remote node is HWQTST::MBXLNK MBXLNK (D)

WAPCWD::*
    * (D)

WAPCWO::PVS_STARTUP
    PVS_STARTUP (D)

WAPCWH::PVS_STARTUP
    PVS_STARTUP (D)

Whatever the local node is HWPTST::*
    * (D)

HWASRS::*
    * (D)


DECNET Objects

NCP objects are used by the PVS / ILVS application for Duplexing and Watchdog links. To setup the required object the following should be run:

$mc ncp

set object LOADLNK number 0 file PVS$DISK:[MBXLNK]LOADLNK.COM -
user mbxlnk password network

set object PVSDUPLEX number 0 file PVS_COMMON:[PVSDUP]PVSDUPLex.com 
user PVSDUP

set object PVSFORCE number 0 file PVS_COMMON:[PVSDUP]PVSFORCE.COM user PVSDUP

set object PVSLINKOFF number 0 file PVS_COMMON:[PVSDUP]PVSLINKOFF.COM user PVSDUP
set object PVSLINKON number 0 file PVS_COMMON:[PVSDUP]PVSLINKON.COM user PVSDUP

set object PVSMASTER number 0 file PVS_COMMON:[PVSDUP]PVSMASTER.COM user PVSDUP

set object PVSSLAVE number 0 file PVS_COMMON:[PVSDUP]PVSSLAVE.COM user PVSDUP

set object PVSWATCH number 0 file PVS_COMMON:[PVSDUP]PVSWATCH.COM user PVSDUP

These objects are defined in various PVS and ILVS command procedures throughout the system. It is recommended that the above objects are placed into a common script and executed after the Decnet has been setup. 

MC NCP SH KN OBJECTS command should display similar to the following important objects


Known Object Volatile Summary as of 15-APR-2014 16:42:24

   Object   Number  File/PID                   User Id          Password

  $IPCACP        0  00000205
  $MOM           0
  $NICONFIG      0
  ILVS_DPXHDLE
                 0  00000282
  ILVS_WDNET     0  0000027E
  LOADLNK        0  PVS$DISK:[MBXLNK]LOADLNK.C MBXLNK           NETWORK
  PVSDUPLEX      0  PVS_COMMON:[PVSDUP]PVSDUPL PVSDUP
  PVSFORCE       0  PVS_COMMON:[PVSDUP]PVSFORC PVSDUP
  PVSLINKOFF     0  PVS_COMMON:[PVSDUP]PVSLINK PVSDUP
  PVSLINKON      0  PVS_COMMON:[PVSDUP]PVSLINK PVSDUP
  PVSMASTER      0  PVS_COMMON:[PVSDUP]PVSMAST PVSDUP
  PVSSLAVE       0  PVS_COMMON:[PVSDUP]PVSSLAV PVSDUP
  PVSWATCH       0  PVS_COMMON:[PVSDUP]PVSWATC PVSDUP
  TASK           0                             ILLEGAL          DISABLED
  FAL           17  FAL.EXE
  HLD           18
  NML           19  NML.EXE                    NML$SERVER       ARACAHURAN
  REMACP        23  0000020F
  MIRROR        25                             MIRRO$SERVER     AYTPALYSAK
  EVL           26  0000020E
  MAIL          27  MAIL_SERVER.EXE            MAIL$SERVER      HEYFSOMY
  PHONE         29  PHONE.EXE                  PHONE$SERVER     ANOWAHURAX
  CTERM         42  0000020F
  VPM           51  VPM.EXE                    VPM$SERVER       AZGOADAXAZ
  DTR           63



Submitting PVS and ILVS logical startup scripts

Other documents within the PVS document repository will discuss the PVS and ILVS startup files which define the application logicals.

In Production the PVS and ILVS applications are started manually however within a test environment this can be scripted to run automatically after the logicals have been submitted.


Rules of understanding before entering the PVS/ILVS Application Layer

1.	The first node to be booted in a PVS / ILVS application architecture will only be a “Slave”.
 
a.	Master and Slave is defined through Decnet. 
b.	Based also upon VMS logicals another “other” server will not be found by the application.

c.	@commands:master will fail for PVS
d.	System/Transition=Master/noignore/check will fail for ILVS


2.	The second node booted in a PVS / ILVS application architecture can become Master IF and only IF there is a Decnet Node Name, Decnet Address, UAF Proxy and Decnet Object accessible by the remote Node acting as a PVS / ILVS Slave.

3.	UCX will need to be running during a @commands:runpvs.

4.	A node already acting as a Slave cannot become Master if there is no other node available according to the rules of point (2).

5.	A Master can switch to Slave if there are transactions outstanding on the Master which are yet to be duplexed to the Slave. After the SWITCH command is issued the system should report outstanding transactions and ask if the switch should go ahead.

6.	A Master can remain a Master if Decnet and Application access to the Slave is lost. However, the Master will not be able to Duplex transactions to the Slave. These transactions will be buffered on the Master until the Slave is available. If the Master shuts down also and returns to find that there is no other physical server available then the returning Master will be a Slave.

7.	Summary to complete Master status there must be two physical servers where one is a Slave.

Example of a Link Status

Tuesday    15-Apr-14                 Link Status  V3.7                  14:32:03

Outstanding transactions = 3, total transactions held = 72860

Unused space in file = 11 words

Link state = Receive Enabled and running, Transmit Disabled




















Application Logicals

PVS and ILVS logicals will be required in order for the applications to run.

The SYS$MANAGER:SYSYTARTUP_PVS.COM and the SYS$MANAGER:SYSTARTUP_ILVS.COM procedures start up the PVS and ILVS logicals however these command procedures do not initiate the applications.  Once the COM file has been submitted via Batch then logicals which help to manage Master and Slave operations will be available:

  "DPXNODE" = "HWPVS2"
  "DISK$ILVS" = "HWPVS1$DKA200:"
  "DISK$OPENVMS062" = "HWPVS1$DKA100:"
  "DISK$PVS" = "HWPVS1$DKA0:"
  "FORCESLAVE" = "HWPVS2::"TASK=PVSFORCE""
  "FTP$DISK" = "HWPVS1$DKA100:[FTP.]"
  "ILVS$DISK" = "HWPVS1$DKA200:"
  "PVS$DISK" = "HWPVS1$DKA0:"
  "PVSDUPTASK" = "HWPVS2::"TASK=PVSDUPLEX""
  "PVSLINKOFFTASK" = "HWPVS2::"TASK=PVSLINKOFF""
  "PVSLINKONTASK" = "HWPVS2::"TASK=PVSLINKON""
  "PVSLOCAL" = "HWPVS1"
  "PVSMASTERTASK" = "HWPVS2::"TASK=PVSMASTER""
  "PVSNODE" = "HWPVS1"
  "PVSREMOTE" = "HWPVS2"
  "PVSSLAVETASK" = "HWPVS2::"TASK=PVSSLAVE""
  "PVSWATTASK" = "HWPVS2::"TASK=PVSWATCH""

Note that some logicals on the LOCAL node e.g. PVSDUPTASK point to the REMOTE node.














Starting up a PVS and Application Environment

1.	Check the system via the Show System command to ensure that none of the application processes are running. If the system is coming back from a reboot then application processes should not be available. 

2.	If the PVS and ILVS applications were not shutdown correctly or if this is a new build then the procedure commands:vobmend should be run. Vobmend repairs the VOB TRP files which contain the Data for the Vehichle Order Bank. 

•	Note: If PVS is brought up and previously required a VOBmend then the system will Stack Dump when the administrator attempts to run anything within the PVS application.

Example of VOBMend

@commands:vobmend returns the following output.

DKA0:[PVS1$SPECIFIC.PVSDATA.ECSS]100_970903.COMT$ @commands:vobmend
ALE      loaded
EDITOR   loaded
PVSLIB   loaded
PVSLIB2  loaded
CACHE    loaded
SERVICE  loaded
TERMINAL loaded
REPGEN   loaded

Data size = 6689 words
16:14:22: Configuration data loaded
16:14:22: Data base improperly closed down - Will relink (Come back later)
16:14:22: Main file length = 10000 records
16:14:22: Overflow file length = 30000 records
16:14:22: History file length = 60000 records
16:14:22: Stripping files
16:14:32: Main file stripped, utilisation = 94%
16:14:58: Tail for Carin index - Record -29796 Vin 1915722
16:14:59: Overflow file stripped, utilisation = 63%
16:15:12: History file stripped, utilisation = 62%
16:15:12: Relinking vehicle free record list
Example of VOBMEND continued 

16:15:12: Chain head = -4
16:15:12: Relinking history free record list
16:15:12: Chain head = 2
16:15:12: Checking hash chains
16:15:12: Checking zone 0 (Pool) chain - 7763 vehicles
16:15:12: Checking zone 4 (Sequenced) chain - 1106 vehicles
16:15:12: Checking zone 7 (Repairs) chain - 0 vehicles
16:15:12: Checking zone 20 (Body Plant) chain - 1109 vehicles

16:15:12: Checking zone 30 (E-Coat / Phosphate) chain - 68 vehicles
16:15:12: Checking zone 35 (Primer and Enamel) chain - 122 vehicles
16:15:12: Checking zone 45 (Out of paint) chain - 0 vehicles
16:15:12: Checking zone 48 (KD TO LCB2) chain - 23 vehicles
16:15:12: Checking zone 49 (KD OFF-LINE) chain - 6 vehicles
16:15:12: Checking zone 50 (A.S.R.S.) chain - 176 vehicles
16:15:12: Checking zone 52 (TLSQ) chain - 208 vehicles
16:15:12: Checking zone 60 (Trim/Final) chain - 247 vehicles
16:15:12: Checking zone 72 (Offline) chain - 268 vehicles
16:15:12: Checking zone 76 (VAD) chain - 0 vehicles
16:15:12: Checking zone 77 (KD Gate Rel) chain - 1524 vehicles
16:15:12: Checking zone 78 (Offline Hold) chain - 0 vehicles
16:15:12: Checking zone 79 (Gate released) chain - 15910 vehicles
16:15:13: Checking zone 80 (* Sequenced) chain - 0 vehicles
16:15:13: Checking zone 82 (* Body Plant) chain - 0 vehicles
16:15:13: Checking zone 84 (* E-Coat / Phosphate) chain - 0 vehicles
16:15:13: Checking zone 85 (* Sealer Deck) chain - 0 vehicles
16:15:13: Checking zone 86 (* Out of Paint) chain - 0 vehicles
16:15:13: Checking zone 87 (* A.S.R.S) chain - 0 vehicles
16:15:13: Checking zone 88 (* Trim/Final) chain - 0 vehicles
16:15:13: Checking zone 91 (* Offline) chain - 0 vehicles
16:15:13: Checking zone 94 (* Gate Release) chain - 0 
Example of VOBMEND continued

vehicles
16:15:13: Checking zone 95 (* GR Analysis) chain - 0 vehicles
16:15:13: Checking zone 96 (+ Offline - late) chain - 0 vehicles
16:15:13: Checking zone 99 (* CMMS Zone) chain - 0 vehicles
16:15:13: Checking history chains
16:15:19: Checking build lists
16:15:19: Checking sequence lists
16:15:19: Checking carin chains
16:15:19: Carin index - head missing
16:15:19: Repairing Carin index
16:15:19: Checking Gap chains
16:15:19: Repairing Gap index
16:15:19: Checking complete
16:15:19: Repairing vehicle records
16:15:19: Repairing overflow free list
16:15:19: Repairing history records
16:15:19: Repairing history free list
16:15:19: FIRST.FREE.HISTORY.SLOT 2
16:15:31: Writing restart information
16:15:31: Repair complete
16:15:31: MAY/MAYBE-NOT attempting restore of buffer zone counts
16:15:31: VOB:BUFFER080 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER082 - 39 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER084 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER085 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER086 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER087 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER088 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER091 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER094 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER095 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER096 - 0 vhcls found - MAYBE correct (no changes)
16:15:31: VOB:BUFFER099 - 0 vhcls found - MAYBE correct (no changes)
Example of VOBMEND continued

16:15:31: Buffer zone count restore - might've been completed !

Stopping TRIPOS on node HWQTST::

Present Trace state is Automatic



RUNPVS Master or Slave

The commands:runpvs procedure can be run if the server is at Slave status remembering the previously explained rules contained within this document.

Example of Runpvs Master
T$ @commands:runpvs master
PVS console device is OPA0:
Deleting temporary directories

OpenVMS V6.2  on node HWPTST   1-APR-2014 11:43:13.63  Uptime  0 04:27:52
  Pid    Process Name    State  Pri      I/O       CPU       Page flts  Pages
00000201 SWAPPER         HIB     16        0   0 00:00:00.31         0      0
00000205 IPCACP          HIB     10        7   0 00:00:00.01        96    202
00000206 ERRFMT          HIB      8      150   0 00:00:00.02       149    275
00000207 OPCOM           HIB      7      299   0 00:00:00.09       320    213
00000208 AUDIT_SERVER    HIB      9      468   0 00:00:00.50       659    532
00000209 JOB_CONTROL     HIB      9      540   0 00:00:00.23       286    471
0000020A QUEUE_MANAGER   HIB      8      932   0 00:00:00.85       835   1271
0000020B SECURITY_SERVER HIB     10       45   0 00:00:01.60      1206   1428
0000020C TP_SERVER       HIB     10     1082   0 00:00:00.85       200    357
0000020D NETACP          HIB     10      103   0 00:00:00.03       191    450
0000020E EVL             HIB      6       49   0 00:00:00.04       376    660  N
0000020F REMACP          HIB      9       12   0 00:00:00.00       107    124
00000210 LATACP          HIB     14       10   0 00:00:02.25       276    284
00000211 WELLIOTT        HIB      7    81837   0 00:00:18.66     34443    513
0000029D Operator        CUR      4    16392   0 00:00:04.92     52071    408
000002F8 UCX$INET_ACP    HIB     10       42   0 00:00:00.02       236    217

Starting PVS on node HWPTST::
Example of RUNPVS continued

node id 114

ALE      loaded
EDITOR   loaded
PVSLIB   loaded
PVSLIB2  loaded
CACHE    loaded
SERVICE  loaded
TERMINAL loaded
REPGEN   loaded

Data size = 6689 words
Configuration data loaded
Loading Task Handlers - please wait
Log/Message handler :  started
VOB handler         :  started
Broadcast handler   :  started
Duplex handler      :  started
Event scheduler     :  started
Station handler     :  started
Terminal handler    :  started
Watchdog handler    :  started


    00000327 02_Log/Message   HIB
    00000328 03_Order-bank    HIB
    00000329 04_Broadcast     HIB
    0000032A 05_Duplex        HIB
    0000032B 06_Event/Report  HIB
    0000032C 07_Stations      HIB
    0000032D 08_Terminals     HIB
    0000032E 09_Watchdog      HIB
    0000032F 10_LATreconnect  HIB

System o.k.

%DCL-I-SUPERSEDE, previous value of MTF_DISK has been superseded
%DCL-I-SUPERSEDE, previous value of MTF_DATA has been superseded
Example of RUNPVS continued

%DCL-I-SUPERSEDE, previous value of MTF_LOG has been superseded
Job MTF (queue PVS$BATCH, entry 56) started on PVS$BATCH

Setting off backup lines ...
Tuesday    01-Apr-14               PVS Set Utility  V1.4                11:43:18

Line 146 is not a broadcast line

DUPLEX-LINK STATUS!
Tuesday    01-Apr-14                 Link Status  V3.7                  11:43:18

Outstanding transactions = 0, total transactions held = 0

Unused space in file = 1023997 words

Link state = Receive Enabled but not running, Transmit Disabled

======   SET MACHINE TO MASTER   =====

Setmaster started.

%%%%%%%%%%%  OPCOM   1-APR-2014 11:43:18.63  %%%%%%%%%%%
Message from user AUDIT$SERVER on HWPTST
Security alarm (SECURITY) and security audit (SECURITY) on HWPTST, system id: 39
026
Auditable event:          Network login failure
Event time:                1-APR-2014 11:43:18.63
PID:                      00000331
Process name:             NET_8216
Username:                 ILLEGAL
Remote nodename:          HWPTST
Remote node id:           39026 (38.114)
Remote username:          $SKENYANI
Status:                   %LOGIN-F-NOSUCHUSER, no such user


* * *  ILVS will be set to MASTER  * * *

Example of RUNPVS continued

clearing the nasty mailbox
Function to clear the ILVS ERRMBX (max        100 messages are cleared).
Assign to ERRMBX failed, reason:
%SYSTEM-W-NOSUCHDEV, no such device available
mailbox empting complete
%WD2-I-STARTWDICI, Start watchdog - default log-directory is now ILVSLOG
%RUN-S-PROC_ID, identification of created process is 00000335
%%%%%%%%%%%  OPCOM   1-APR-2014 11:43:19.29  %%%%%%%%%%%
Message from user $SKENYANI on HWPTST
14/04/01-11:43 HWPTST:: %SYSTEM-S-NOSUCHNODE, remote node is unknown

%WD2-I-PLEASEWAIT, *** Please wait *** boot procedure in progress ***
%%%%%%%%%%%  OPCOM   1-APR-2014 11:43:21.01  %%%%%%%%%%%
Message from user AUDIT$SERVER on HWPTST
Security alarm (SECURITY) and security audit (SECURITY) on HWPTST, system id: 39
026
Auditable event:          Network login failure
Event time:                1-APR-2014 11:43:21.01
PID:                      00000352
Process name:             NET_8218
Username:                 ILLEGAL
Remote nodename:          HWPTST
Remote node id:           39026 (38.114)
Remote username:          $SKENYANI
Status:                   %LOGIN-F-NOSUCHUSER, no such user

%%%%%%%%%%%  OPCOM   1-APR-2014 11:43:21.17  %%%%%%%%%%%
Message from user $SKENYANI on HWPTST
14/04/01-11:43 HWPTST:: %WD2-S-DPXSYSNOTAVAIL, Duplex system is not available -
don't go to master state

%WD2-I-PRCRUN, Watchdog is controlling ILVS
%SYSTEM-S-NORMAL, normal successful completion
14/04/01-11:43 HWPTST:: %WD2-S-DPXSYSNOTAVAIL, Duplex system is not available -
don't go to master state
* * *  ILVS is MASTER on  * * *

Example of RUNPVS continued

Waiting for ILVS to start ...

   1-APR-2014 11:43:21

Job LOADLNK (queue PVS$BATCH, entry 58) started on PVS$BATCH
Job LAT_SERVICE (queue PVS$BATCH, entry 59) started on PVS$BATCH

TEMP - disable lat-watch on line 47 ...
TEMP - disable lat-watch on line 146 ...
disable watching latconnection line 146 ...
%%%%%%%%%%%  OPCOM   1-APR-2014 11:43:25.99  %%%%%%%%%%%
Message from user INTERnet on HWPTST
INTERnet ACP Created INTERnet interface: ZEA0

%UCX-W-NODEVINTE, Interface not found
Job MTF (queue PVS$BATCH, entry 60) started on PVS$BATCH

Job LAT_SERVICE (queue PVS$BATCH, entry 59) completed
Watchdog service failed because only valid to do this on the master machine

T$ pvs
Halewood PVS 7.2 interrogation point

Running this command should also bring up the ILVS application if the applications are being brought up for the first time.

Once this has run the following processes should be visible after the Show SYS command.







Example of PVS Processes
02_Log/Message  
03_Order-bank   
04_Broadcast    
05_Duplex       

06_Event/Report 

07_Stations     

08_Terminals    

09_Watchdog     

10_LATreconnect 


Example of ILVS Processes
H$Watchdog
H$QUEUE
H$MESSAGE
       
H$DUPLEX        

H$UPDATE        

H$SUBSTITUTION  

H$RMS_LOCK      

H$BROADCAST     
H$MIX           

H$ZONEMOVE      

H$COUNTS        

T$SUB





Master / Slave Decnet Link Processes

Previously explained are the processes used for managing the Decnet link and transactions between the Master and the Slave servers.

05_Duplex = Manages transactions between the Master and Slave and can be controlled via Link On/Link Off commands.

09_Watchdog = Management of the Decnet link between the Master and Slave servers to ensure that the link is stable and ever present. There are tested conducted by the process to montor response time across the link.

H$WATCHDOG = Performs the job of managing the Decent link between the Master and Slave servers for the ILVS application.

H$DUPLEX = Manages transactions between the Master and Slave servers for the ILVS application.

T$SUBBISI0 = BIS Station process used by ILVS to receive broadcasts from PLC stations and terminals. 



Master and Slave Recap

To recap it is possible to bring the server up as Master if the following is possible.

•	Decnet is up.
•	UCX is up.
•	“Set host” command to the remote server works.
•	“Dir remote_server::” command works and explained proxies are up and running.
•	The correct Objects are up and running.
•	The correct logicals can be viewed.








The first Time the PVS Servers are Built

On the SLAVE the PVS command should return the prompt NODE_SLAVE. 

On the SLAVE the ILVS command should return the prompt ILVS_SLAVE.

Check on the SLAVE that all of the PVS and ILVS processes are running.

On the SLAVE test a few PVS and ILVS commands within the application. 

On PVS test the following commands VOB, BRD-S,LIST-Z, LIST-CONFIG. 

The system will normally stack dump during these commands if the system has not been setup correctly or the system requires a vobmend. 

Vobmend will rebuild all of the VOB TRP files which contain application data.

On ILVS run SYS/SHOW which lists ILVS processes and BIS stations.

NOTE
The administrator needs to be AUTHORISED to run ILVS commands.

On the PVS Slave run the Show Link command from the $ prompt. Run the user$disk:[operator]login.com procedure if this cannot be done or there are errors.

PVS and ILVS SLAVE server seems to be setup correctly if the above is working.

On the server that will become Master the administrator may have already brought the system up as a Slave therefore effectively there are two slaves at the current time. This is common the first time that PVS and ILVS servers are built. One of these Slaves needs to be promoted to Master.

It would be good to test the PVS and LVS environment when the server is SLAVE and as above to ensure that the application is working as expected.

On the server that will become the Master run the following command.

•	@commands:master = If PVS is already running on the Slave

The system will report if it cannot see the Duplex Server and an error will be displayed. This is an ILVS message. The server produces no error message if the PVS Master status cannot be achieved.

If the Decnet conditions are met the server will become Master and report the following message.

Now a Master!!

If the ILVS application does not display Master when the application is entered then run the following:

ILVS_Slave> System/trans=master/noignore/check
	
Do not use the /ignore and the /nocheck commands because important system checks will be ignored and the system will be forced into ILVS Master status.

Once the system has become a MASTER the links for Duplexing transactions and Watchdog link analysis can be brought up.

PVS> LINK ON = Brings the DUPLEX LINK on

PVS> WLINK ON = Bring the Watchdog links on

The Duplex  links will manage the duplexing of transactions between the Master and the Slave for PVS and ILVS. There is a logic behind the fact that an Administrator must manually turn duplex and watchdog links on and off. 
•	The Administrator must manually determine if the Decnet and UCX links between the Master and the Slave are working.
•	The Administrator must manually determine if the system is ready to send transactions to the Slave.

The Watchdog links will manage the links between the two servers by testing that the link is working and the other server responds via the watchdog link on the remote server.

MC NCP SH KN LINKS = will show the following links on the Master

8206   38.114 (HWPTST)   0000027E  H$WATCHDOG       8562 ILVS_WDNET
8207   38.114 (HWPTST)   00000282  H$DUPLEX         8563 ILVS_DPXHDLE
8209   38.114 (HWPTST)   00000279  09_Watchdog      8565  PVSWATCH
8212   38.114 (HWPTST)   00000275  05_Duplex        8566  PVSDUPLEX

Note that the links on the Master are run by different accounts to those on the Slave.

MC ncp will show the following links on the Slave

8562   38.121 (HWQTST)   0000021E  H$WATCHDOG         8206  $SKENYANI
8563   38.121 (HWQTST)   00000222  H$DUPLEX           8207  $SKENYANI
8565   38.121 (HWQTST)   000002AF  01_Watremote       8209  $SKENYANI
8566   38.121 (HWQTST)   000002B5  11_Dup-remote      8212  $SKENYANI

Note that the Links on the Slave are run by the account which started duplexing and the watchdog processes.

Significantly the links appear different from the viewpoint of the Master and the Slave. On the remote server the link names for the PVS application report that this is the remote server. The remote server also displays the name of the account which started the link on the master.

Switching from Slave to Master/Master to Slave
The following information assumes that the administrator is familiar with the procedure. This is not a Master Slave training manual due to the fact that this is a secure procedure locked down by passwords. Refer to other PVS ILVS application administrators concerning the following tasks.

•	On the current Master check the status of the Link.

•	On the current Master if there are current transactions outstanding this is probably due to the fact that the LINK is OFF. If this is the case turn the LINK ON/ WLINK ON.

•	Keep checking the status of the LINK on the MASTER server in order to determine that the transactions are going down. This signifies that transactions are now being duplexed to the SLAVE. The target of outstanding transactions on the MASTER is 0 for a server that needs to be switched to SLAVE status.

•	Check the status of the LINK on the SLAVE server to ensure that the transactions are going up. The target is the original number of outstanding transactions on the Master.

•	 Once all transactions have been duplexed from the MASTER the LINK and WLINK can be turned OFF. Then the MASTER can be switched by issuing the SWITCH password protected command. This command will switch the PVS and ILVS application server from a Master to a Slave. The Master will check to ensure that the activity should be performed.

Test the system on the new slave by entering the PVS and ILVS applications.

On the Old Master the system will show node_Slave> when PVS is entered and ILVS_Slave when ILVS is entered.

On the old SLAVE the system should move automatically to Master.

•	A Master should be left in the state the the LINK and WLINK are on.

Check that the Decnet links are up and running.

Other Documents
Getting new virtualised servers to the Master and Slave stage of the application build overlaps with other PVS and ILVS documentation intended to be more of a discussion for vms system administration, PVS and ILVS.



















Appendix A

Building Blocks of PVS / ILVS Application Server

•	Sysgen				
o	Basically a show/all
o	Estimated time to change, reboot and Test

•	Startups				
o	Looked through the systartup tree and sysman to check.

•	Disks			
o	Sh dev d initially
o	Estmated time to change, check any mount references, test com procedures, mou and dism tests 				 

•	Logicals				
o	Sh log/table=*
o	Estimated time to change checking com procedures and startup files and reboot.						 

•	Systartup_vms			
o	Estimated time to change and reboot test

•	Queues				

•	Networks 				
o	Looking at UCX and NCP
o	Requires changing log files, decent node name, test, reboot.
o	Estimated time to change	

•	LAT				
o	Some work needed here
o	Estimated time to chage as part of network changes.

•	SYSUAF				
o	Proxies
o	List/full
o	Estimated time to change testing interfaces 

•	PVS ILVS Startup			Page 7
o	Ploughing through the Application startups files
o	Initial checks did not show many node references however another thorough check would be prudent.
o	Estimated time to change, test, reboot etc.	=	Allow 2 Days




•	Files

o	DKA0 COM				
o	DKA0 DAT				
o	DKA0 Files Named HWPVS*
o	DKA100 COM Files			
o	DKA100 LIS Files			
o	DKA100 LOG Files			
o	DKA100 TRP Files			
o	DKA100 Files Names HWPVS	
o	DKA200 COM Files			
o	DKA200 LOG Files			

o	Lots of entries which may be dealt with as part of application or network changes.

Sysgen

-	SYSNODE
-	SCSSYSTEMID                 39038	Translates to a NCP Node ID.

Startups

-	Syconfig.com	=	Not an Issue
-	Sylogicals.com =	Not an Issue
-	Sypagswpfiles.com =	Not an Issue
-	Sysecurity.com	=	Not an Issue
-	SYSMAN>Startup	Not an Issue *** Double Check*

Disks

HWPVS1$DKA0:
HWPVS1$DKA100:
HWPVS1$DKA200:          
HWPVS1$DKB100:          (Normally reserved for backups)



Systartup_VMS.com	Hardcoded Name Found

-	Uses this_node logical f$getsyi(“nodename”)
-	Uses the Node name on the Mount Command
-	MOUNT/SYS     HWPVS1$DKA0:
-	Que startup uses this_node logical translating to hardcode node name
-	IF f$getsyi("nodename") .EQS. "HWPVS1" $ THEN






Queues

The below queues are just an example that queues include Node Name. This will be ok once SCSNODE is changed.

Printer queue LAT2111, stopped, on HWPVS1::, mounted form DEFAULT
  /BASE_PRIORITY=4 /DEFAULT=(FEED,FORM=DEFAULT) /OWNER=[SYSTEM] /PROTECTION=(S:M,O:D,G:R,W:S)

Batch queue SYS$BATCH, idle, on HWPVS1::
  /BASE_PRIORITY=3 /JOB_LIMIT=10 /OWNER=[SYSTEM] /PROTECTION=(S:M,O:D,G:RSM,W:RSM)


Network related UCX

-	UCX TCPIP Logs need to be looked at.

-	UCX - FTP
	            UCX$FTPD server started on <CR><LF>            
HWPVS1.jaguar.ford.com  10-FEB-2014 15:05:55.98<CR><LF>

NCP

WPVS1 >mc ncp sh exec


Node Volatile Summary as of 12-FEB-2014 14:48:14

Executor node = 38.126 (HWPVS1)

State                    = on
Identification           = DECnet for OpenVMS VAX V6.1


HWPVS1 >mc ncp sh node hwpvs1 char


Node Volatile Characteristics as of 12-FEB-2014 14:50:11

Executor node = 38.126 (HWPVS1)

Default access           = incoming and outgoing
Pipeline quota           = 4032
Alias maximum links      = 32
Path split policy        = Normal
Maximum Declared Objects = 31



HWPVS1 >mc ncp sh node hwpvs1 counters


Executor node = 38.126 (HWPVS1)



HWPVS1 >mc ncp sh node hwpvs1 status



Executor node = 38.126 (HWPVS1)


HWPVS1 >mc ncp sh kn links


Known Link Volatile Summary as of 12-FEB-2014 14:56:43

   Link       Node           PID     Process     Remote link  Remote user

  8367   38.284 (HWPVS2)   0000026D  H$WATCHDOG          269  ILVS_WDNET
  8368   38.284 (HWPVS2)   00000271  H$DUPLEX            270  ILVS_DPXHDLE
  8374   38.284 (HWPVS2)   00000264  05_Duplex           276  PVSDUPLEX
  8375   38.284 (HWPVS2)   00000268  09_Watchdog         277  PVSWATCH



HWPVS1 >mc ncp sh kn links char


Known Link Volatile Characteristics as of 12-FEB-2014 14:57:54

Link = 8367

State                    = run
PID                      = 0000026D
Remote node              = 38.284 (HWPVS2)
Delay time               = 0
Remote link              = 269
Remote user              = ILVS_WDNET
Username                 = $RUNDERWO
Process name             = H$WATCHDOG


Link = 8368

State                    = run
PID                      = 00000271
Remote node              = 38.284 (HWPVS2)
Delay time               = 1
Remote link              = 270
Remote user              = ILVS_DPXHDLE
Username                 = $RUNDERWO
Process name             = H$DUPLEX


Link = 8374

State                    = run
PID                      = 00000264
Remote node              = 38.284 (HWPVS2)
Delay time               = 0
Remote link              = 276
Remote user              = PVSDUPLEX
Username                 = $RUNDERWO
Process name             = 05_Duplex


Link = 8375

State                    = run
PID                      = 00000268
Remote node              = 38.284 (HWPVS2)
Delay time               = 1
Remote link              = 277
Remote user              = PVSWATCH
Username                 = $RUNDERWO
Process name             = 09_Watchdog


HWPVS1 >mc ncp sh logging monitor


Logging Volatile Summary as of 12-FEB-2014 14:59:50


 Logging sink type = monitor

    Sink Node       Source               Events                   State Name

   38.126 (HWPVS1)  (All sources)        0.0-9                     on
                    (All sources)        2.0-1
                    (All sources)        4.2-13 15-16
                                         18-20
                    (All sources)        5.0-18
                    (All sources)        128.0-4



HWPVS1 >mc ncp sh kn logging


Known Logging Volatile Summary as of 12-FEB-2014 15:02:01


 Logging sink type = monitor

    Sink Node       Source               Events                   State Name

   38.126 (HWPVS1)  (All sources)        0.0-9                     on
                    (All sources)        2.0-1
                    (All sources)        4.2-13 15-16
                                         18-20
                    (All sources)        5.0-18
                    (All sources)        128.0-4


LATCP> sh service pvsmaster/full

LATCP>
 LAT Control Program
Service Name:     PVSMASTER                Service Type:  General
Service Status:   Available                Connections:   Enabled
Service Password: Disabled                 Queueing:      N/A
Service Ident:    Master PVS on node HWPVS1

Node Name            Status      Rating   Identification
HWPVS1               On            83 D   Master PVS on node HWPVS1



LATCP> sh service hwpvs1/full
LATCP>
 LAT Control Program
Service Name:     HWPVS1                   Service Type:  General
Service Status:   Available                Connections:   Enabled
Service Password: Disabled                 Queueing:      N/A
Service Ident:

Node Name            Status      Rating   Identification
HWPVS1               On            83 D










SYSUAF

UAF> show/proxy *

 Default proxies are flagged with (D)

WAPCWH::*
    * (D)

HWPVSE::*
    * (D)

WAPCWD::*
    * (D)

HWCDMA::MBXLNK
    MBXLNK (D)

WAPCWO::PVS_STARTUP
    PVS_STARTUP (D)

HWPVS1::*
    * (D)

HWPVSD::*
    * (D)

WAPCWH::PVS_STARTUP
    PVS_STARTUP (D)

HWPVS2::*
    * (D)

HWASRS::*
    * (D)

HWPVS1::MBXLNK
    MBXLNK (D)

SYSUAF>List/full

•	Node entries found for the Default Directory field.








Appendix B – Searching for Hardcoded System names

HWPVS1 >search systartup_pvs.com hwpvs

$!**   0.0   05-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **
$!**   0.3   01-Aug-1997  A.Dench         Making HWPVS1 and HWPVS2 the same   **
$ if f$getsyi("nodename") .EQS. "HWPVS1"
$       pvsdevice  = "HWPVS1$DKA0:"
$       ilvsdevice = "HWPVS1$DKA200:"
$       pvsdevice  = "HWPVS2$DKA100:"
$       ilvsdevice = "HWPVS2$DKA200:"
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"



HWPVS1 >search systartup_pvs.com node

$ if f$getsyi("nodename") .EQS. "HWPVS1"
$ nodename  = f$trnlnm("sys$node")
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"
$ define/sys/exec    pvsnode       'F$EXTRACT(0,6,nodename)'
$ define/sys/exec    pvslocal      'F$EXTRACT(0,6,nodename)'
$ define/sys/exec    pvsremote     'othernode'
                        "''othernode'::""TASK=PVSDUPLEX"""
                        "''othernode'::""TASK=PVSWATCH"""
                        "''othernode'::""TASK=PVSMASTER"""
                        "''othernode'::""TASK=PVSSLAVE"""
                        "''othernode'::""TASK=PVSLINKON"""
                        "''othernode'::""TASK=PVSLINKOFF"""
                        "''othernode'::""TASK=PVSFORCE"""

HWPVS1 >search pvs_logicals.com hwpvs
$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

HWPVS1 >search loadlnk.com node
$!                                      nodes SLPVSC/SLPVSD/SLPVSG.           !!
$!   Get node name
$ node = f$extract(0,6,f$trnlnm("sys$node"))
$ IF (node .eqs. "GKAGVA" .OR. node .eqs. "GKAGVB" .OR. node .eqs. "GKWDCB" -
        .OR. node .eqs. "SESARA" .OR. node .eqs. "SEWADA" -
        .OR. node .eqs. "VAIMFB" .OR. node .eqs. "VAIMFA")
$!   Get remote node name
$     othernode  = f$extract(0,6,ncb)
$     othernode = ""
$rd_node_start:
$ READ /ERR=rd_node_end /END=rd_node_end -

Disks

This was a basic review of flat files com,dat,log,lis,trp etc. No executable or compiled or anything that looked like it.

DKA0 - COM


******************************
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVS1HWCDMA.COM;3

$! Procedure CDMHWPVS1HWCDMA.COM to establish network link CDM_PVS1
$! between nodes HWPVS1 and HWCDMA.
$ SET PROCESS/NAME="CDMHWPVS1HWCDMA"
$ DEFINE/USER SYS$INPUT  PVS$DISK:[pvs$common.pvsdup]CDMHWPVS1HWCDMA.DAT
$ DEFINE/USER SYS$OUTPUT PVS$DISK:[pvs$common.pvsdup]CDMHWPVS1HWCDMA.LOG
$ DEFINE/USER SYS$ERROR  PVS$DISK:[pvs$common.pvsdup]CDMHWPVS1HWCDMA.ERR

******************************
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVS2HWCDMA.COM;1

$! Procedure CDMHWPVS2HWCDMA.COM to establish network link CDM_PVS2
$! between nodes HWPVS2 and HWCDMA.
$ SET PROCESS/NAME="CDMHWPVS2HWCDMA"
$ DEFINE/USER SYS$INPUT  PVS$DISK:[MBXLNK]CDMHWPVS2HWCDMA.DAT
$ DEFINE/USER SYS$OUTPUT PVS$DISK:[MBXLNK]CDMHWPVS2HWCDMA.LOG
$ DEFINE/USER SYS$ERROR  PVS$DISK:[MBXLNK]CDMHWPVS2HWCDMA.ERR

******************************
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVSDHWCDMA.COM;2

$! Procedure CDMHWPVSDHWCDMA.COM to establish network link CDM_PVSD
$! between nodes HWPVSD and HWCDMA.
$ SET PROCESS/NAME="CDMHWPVSDHWCDMA"
$ DEFINE/USER SYS$INPUT  PVS$DISK:[MBXLNK]CDMHWPVSDHWCDMA.DAT
$ DEFINE/USER SYS$OUTPUT PVS$DISK:[MBXLNK]CDMHWPVSDHWCDMA.LOG
$ DEFINE/USER SYS$ERROR  PVS$DISK:[MBXLNK]CDMHWPVSDHWCDMA.ERR

******************************
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVSEHWCDMA.COM;2

$! Procedure CDMHWPVSEHWCDMA.COM to establish network link CDM_PVSE
$! between nodes HWPVSE and HWCDMA.
$ SET PROCESS/NAME="CDMHWPVSEHWCDMA"
$ DEFINE/USER SYS$INPUT  PVS$DISK:[MBXLNK]CDMHWPVSEHWCDMA.DAT
$ DEFINE/USER SYS$OUTPUT PVS$DISK:[MBXLNK]CDMHWPVSEHWCDMA.LOG
$ DEFINE/USER SYS$ERROR  PVS$DISK:[MBXLNK]CDMHWPVSEHWCDMA.ERR

******************************
DKA0:[PVS$COMMON.PVSSYS.COMMANDS]ECSS_RUN.COM;3

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS$COMMON.PVSSYS.COMMANDS]IBMINSYSTEM.COM;8

$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO done

******************************
DKA0:[PVS$COMMON.PVSSYS.COMMANDS]USER.COM;62

       ucx set interface zea0 /host=hwpvs /network=255.255.254.0

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.ECSS]ECSS_RUN.COM;16

$! if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$! if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]AMEND_TO_IBM.COM;1

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_old.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_new.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]amend_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]ANALYSE_SEQ.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]ANALYSE_TRIM.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNOPRINT
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWERRO

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]ANAL_FILE.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]CANCEL_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_cancel.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]cancel_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COMMIT_TRANS.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_03.trp HWPVSB::valis:trans_03.trp
$ SUBMIT/REMOTE     HWPVSB::pvs_data:[valis]subcommit_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO end

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPCOMANAL.COM;7

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPFILEPRINTER.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPNEWREPSPRINT.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPOVERANAL.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPREPSLATOMAST.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPREPSPRINTER.COM;10

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]COPYFILE.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]DELBODY.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]DELPATENT.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]DELREPS.COM;4

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]DIFF_OUT.COM;4

$ diff/out=foster:diff_a_b_plates.trp	hwpvsa::foster:a_plate_zone.trp -
hwpvsb::foster:b_plate_zone.trp
$ diff/out=foster:diff_a_b_body.trp	hwpvsa::foster:a_body_zone.trp -
hwpvsb::foster:b_body_zone.trp
$ diff/out=foster:diff_a_b_paint.trp	hwpvsa::foster:a_paint_zone.trp -
hwpvsb::foster:b_paint_zone.trp
$ diff/out=foster:diff_a_b_pretrim.trp	hwpvsa::foster:a_pretrim_zone.trp -
hwpvsb::foster:b_pretrim_zone.trp
$ diff/out=foster:diff_a_b_mezz.trp	hwpvsa::foster:a_mezz_zone.trp -
hwpvsb::foster:b_mezz_zone.trp
$ diff/out=foster:diff_a_b_trima.trp	hwpvsa::foster:a_trima_zone.trp -
hwpvsb::foster:b_trima_zone.trp
$ diff/out=foster:diff_a_b_trimb.trp	hwpvsa::foster:a_trimb_zone.trp -
hwpvsb::foster:b_trimb_zone.trp
$ diff/out=foster:diff_a_b_final.trp	hwpvsa::foster:a_final_zone.trp -
hwpvsb::foster:b_final_zone.trp

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]ECSSTRANS.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_03.trp HWPVSB::valis:trans_03.trp
$ SUBMIT/REMOTE     HWPVSB::pvs_data:[valis]subcommit_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO end

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]FILE_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_file.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]file_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]FOSTER.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]GETSEQUENCE.COM;1

$ if "''thisnode'" .NES. "HWPVSB::" THEN GOTO NOTRANSMISSION
$ if f$search ("HWPVSD::rjelocal:phasetwo.rje") .nes. "" then delete/log -
HWPVSD::rjelocal:phasetwo.rje;*
$ if f$search ("HWPVSD::rjelocal:phasetwo.trp") .nes. "" then delete/log -
HWPVSD::rjelocal:phasetwo.trp;*
$ copy/log	rjelocal:phasetwo.rje		HWPVSD::rjelocal:*.*
$ if f$search ("HWPVSE::rjelocal:phasetwo.rje") .nes. "" then delete/log -
HWPVSE::rjelocal:phasetwo.rje;*
$ if f$search ("HWPVSE::rjelocal:phasetwo.trp") .nes. "" then delete/log -
HWPVSE::rjelocal:phasetwo.trp;*
$ copy/log	rjelocal:phasetwo.rje		HWPVSE::rjelocal:*.*
$ submit/remote		HWPVSB::pvs_data:[valis]subgetsequence.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]LOADREPS.COM;9

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]LOGIN.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]LOSTPATENT.COM;5

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]MAINT_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_maint.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]maint_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]MAKE_A_REP.COM;7

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]MAKE_REPS.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]PATPLAT.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]PATPLATAMEND.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD
$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]PH1.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then GOSUB NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]PRINT_ANAL.COM;1

$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]PROD_TRANS.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_02.trp HWPVSB::valis:trans_02.trp
$ SUBMIT/REMOTE        HWPVSB::pvs_data:[valis]subprod_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO exit

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]REP300UPDATE.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]RE_ANALYSE.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]SE_ALL_ZONES.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]SE_PAINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]SE_ZONES_COUNT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]UNBUILT_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_unbuilt.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_unsold.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]unbuilt_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]UNNUMSOLVEK.COM;5

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE]UPDATECONFIG.COM;4

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]AMEND_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_old.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_new.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]amend_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]ANALYSE_SEQ.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]ANALYSE_TRIM.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNOPRINT
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWERRO

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]ANAL_FILE.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]CANCEL_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_cancel.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]cancel_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COMMIT_TRANS.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_03.trp HWPVSB::valis:trans_03.trp
$ SUBMIT/REMOTE     HWPVSB::pvs_data:[valis]subcommit_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO end

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPCOMANAL.COM;8

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPFILEPRINTER.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPNEWREPSPRINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPOVERANAL.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPREPSLATOMAST.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPREPSPRINTER.COM;11

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]COPYFILE.COM;3

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]DELBODY.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]DELPATENT.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]DELREPS.COM;5

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]DIFF_OUT.COM;5

$ diff/out=foster:diff_a_b_plates.trp	hwpvsa::foster:a_plate_zone.trp -
hwpvsb::foster:b_plate_zone.trp
$ diff/out=foster:diff_a_b_body.trp	hwpvsa::foster:a_body_zone.trp -
hwpvsb::foster:b_body_zone.trp
$ diff/out=foster:diff_a_b_paint.trp	hwpvsa::foster:a_paint_zone.trp -
hwpvsb::foster:b_paint_zone.trp
$ diff/out=foster:diff_a_b_pretrim.trp	hwpvsa::foster:a_pretrim_zone.trp -
hwpvsb::foster:b_pretrim_zone.trp
$ diff/out=foster:diff_a_b_mezz.trp	hwpvsa::foster:a_mezz_zone.trp -
hwpvsb::foster:b_mezz_zone.trp
$ diff/out=foster:diff_a_b_trima.trp	hwpvsa::foster:a_trima_zone.trp -
hwpvsb::foster:b_trima_zone.trp
$ diff/out=foster:diff_a_b_trimb.trp	hwpvsa::foster:a_trimb_zone.trp -
hwpvsb::foster:b_trimb_zone.trp
$ diff/out=foster:diff_a_b_final.trp	hwpvsa::foster:a_final_zone.trp -
hwpvsb::foster:b_final_zone.trp

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]ECSSTRANS.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_03.trp HWPVSB::valis:trans_03.trp
$ SUBMIT/REMOTE     HWPVSB::pvs_data:[valis]subcommit_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO end

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]FILE_TO_IBM.COM;4

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_file.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]file_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]FOSTER.COM;3

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]GETSEQUENCE.COM;2

$ if "''thisnode'" .NES. "HWPVSB::" THEN GOTO NOTRANSMISSION
$ if f$search ("HWPVSD::rjelocal:phasetwo.rje") .nes. "" then delete/log -
HWPVSD::rjelocal:phasetwo.rje;*
$ if f$search ("HWPVSD::rjelocal:phasetwo.trp") .nes. "" then delete/log -
HWPVSD::rjelocal:phasetwo.trp;*
$ copy/log	rjelocal:phasetwo.rje		HWPVSD::rjelocal:*.*
$ if f$search ("HWPVSE::rjelocal:phasetwo.rje") .nes. "" then delete/log -
HWPVSE::rjelocal:phasetwo.rje;*
$ if f$search ("HWPVSE::rjelocal:phasetwo.trp") .nes. "" then delete/log -
HWPVSE::rjelocal:phasetwo.trp;*
$ copy/log	rjelocal:phasetwo.rje		HWPVSE::rjelocal:*.*
$ submit/remote		HWPVSB::pvs_data:[valis]subgetsequence.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]LOADREPS.COM;10

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]LOGIN.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]LOSTPATENT.COM;6

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]MAINT_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_maint.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]maint_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]MAKE_A_REP.COM;8

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]MAKE_REPS.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]PATPLAT.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]PATPLATAMEND.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD
$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]PH1.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then GOSUB NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]PRINT_ANAL.COM;2

$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]PROD_TRANS.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN GOTO TRANSMISSION
  COPY/LOG valis:trans_02.trp HWPVSB::valis:trans_02.trp
$ SUBMIT/REMOTE        HWPVSB::pvs_data:[valis]subprod_trans.com
$ IF "''thisnode'" .NES. "HWPVSB" THEN GOTO exit

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]REP300UPDATE.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]RE_ANALYSE.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]SE_ALL_ZONES.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]SE_PAINT.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]SE_ZONES_COUNT.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]UNBUILT_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_unbuilt.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_unsold.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]unbuilt_to_ibm.com

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]UNNUMSOLVEK.COM;6

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW

******************************
DKA0:[PVS1$SPECIFIC.PVSDATA.RJE.HWD]UPDATECONFIG.COM;5

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"


DKA0 - DAT

******************************
DKA0:[MBXLNK]CDMHWPVS1HWCDMA.DAT;764

/RX_MBX=CDMTOPVS_MBX/TX_MBX=CDM_MBX/MBX_SIZE=600/LOGFI=/LINK_ID=CDM_PVS1/CTR_MB=CDMHWPVS1HWCDMA_TEST/REMOTE=HWCDMA"MBXLNK NETWORK"::"TASK=LOADLNK"

******************************
DKA0:[MBXLNK]CDMHWPVS2HWCDMA.DAT;1420

/RX_MBX=CDMTOPVS_MBX/TX_MBX=CDM_MBX/MBX_SIZE=600/LOGFI=/LINK_ID=CDM_PVS2/CTR_MB=CDMHWPVS2HWCDMA_TEST/REMOTE=HWCDMA"MBXLNK NETWORK"::"TASK=LOADLNK"

******************************
DKA0:[MBXLNK]LINKFILE.DAT;15

!HWCDMA / LINKID=CDM_PVS1 / REMOTE=HWPVS1 / TX_MBX=CDMTOPVS1_MBX -
!HWPVS1 / LINKID=CDM_PVS1 / REMOTE=HWCDMA / TX_MBX=CDM_MBX -
!HWCDMA / LINKID=CDM_PVS2 / REMOTE=HWPVS2 / TX_MBX=CDMTOPVS2_MBX -
!HWPVS2 / LINKID=CDM_PVS2 / REMOTE=HWCDMA / TX_MBX=CDM_MBX -
!HWPVS1  / LINKID=MCI  / REMOTE=HWPVSE / TX_MBX=PVS_MCIS_MBX -
!HWPVS1  / LINKID=MCI  / REMOTE=HWPVSD / TX_MBX=PVS_MCIS_MBX -
!HWPVS2  / LINKID=MCI  / REMOTE=HWPVSE / TX_MBX=PVS_MCIS_MBX -
!HWPVS2  / LINKID=MCI  / REMOTE=HWPVSD / TX_MBX=PVS_MCIS_MBX -
!HWPVSE  / LINKID=MCI  / REMOTE=HWPVS1 / RX_MBX=PVS_MCIS_MBX -
!HWPVSE  / LINKID=MCI  / REMOTE=HWPVS2 / RX_MBX=PVS_MCIS_MBX -
!HWPVSD  / LINKID=MCI  / REMOTE=HWPVS1 / RX_MBX=PVS_MCIS_MBX -
!HWPVSD  / LINKID=MCI  / REMOTE=HWPVS2 / RX_MBX=PVS_MCIS_MBX -

******************************
DKA0:[MBXLNK]MCIHWPVS1HWPVSD.DAT;234

/RX_MBX=MCIHWPVS1HWPVSD_RX/TX_MBX=PVS_MCIS_MBX/MBX_SIZE=8192/LOGFI=/LINK_ID=MCI/CTR_MB=MCIHWPVS1HWPVSD_TEST/REMOTE=HWPVSD"MBXLNK NETWORK"::"TASK=LOADLNK"

******************************
DKA0:[MBXLNK]MCIHWPVS1HWPVSE.DAT;220

/RX_MBX=MCIHWPVS1HWPVSE_RX/TX_MBX=PVS_MCIS_MBX/MBX_SIZE=8192/LOGFI=/LINK_ID=MCI/CTR_MB=MCIHWPVS1HWPVSE_TEST/REMOTE=HWPVSE"MBXLNK NETWORK"::"TASK=LOADLNK"

******************************
DKA0:[MBXLNK]MCIHWPVS2HWPVSD.DAT;178

/RX_MBX=MCIHWPVS2HWPVSD_RX/TX_MBX=PVS_MCIS_MBX/MBX_SIZE=8192/LOGFI=/LINK_ID=MCI/CTR_MB=MCIHWPVS2HWPVSD_TEST/REMOTE=HWPVSD"MBXLNK NETWORK"::"TASK=LOADLNK"

******************************
DKA0:[MBXLNK]MCIHWPVS2HWPVSE.DAT;201

/RX_MBX=MCIHWPVS2HWPVSE_RX/TX_MBX=PVS_MCIS_MBX/MBX_SIZE=8192/LOGFI=/LINK_ID=MCI/CTR_MB=MCIHWPVS2HWPVSE_TEST/REMOTE=HWPVSE"MBXLNK NETWORK"::"TASK=LOADLNK"


DKA0 – Files Named HWPVS Something

Directory DKA0:[MBXLNK]

CDMHWPVS1HWCDMA.DAT;764                 CDMHWPVS1HWCDMA.ERR;1
CDMHWPVS1HWCDMA.LOG;597                 CDMHWPVS2HWCDMA.DAT;1420
CDMHWPVS2HWCDMA.ERR;1                   CDMHWPVS2HWCDMA.LOG;1277
CDMHWPVSDHWCDMA.DAT;2                   CDMHWPVSEHWCDMA.DAT;2
MCIHWPVS1HWPVSD.DAT;234                 MCIHWPVS1HWPVSD.ERR;1
MCIHWPVS1HWPVSD.LOG;188                 MCIHWPVS1HWPVSE.DAT;220
MCIHWPVS1HWPVSE.ERR;1                   MCIHWPVS1HWPVSE.LOG;184
MCIHWPVS2HWPVSD.DAT;178                 MCIHWPVS2HWPVSD.ERR;1
MCIHWPVS2HWPVSD.LOG;153                 MCIHWPVS2HWPVSE.DAT;201
MCIHWPVS2HWPVSE.ERR;1                   MCIHWPVS2HWPVSE.LOG;172

Total of 20 files.

Directory DKA0:[PVS$COMMON.PVSDUP]

CDMHWPVS1HWCDMA.COM;3                   CDMHWPVS1HWCDMA.DAT;1
CDMHWPVS1HWCDMA.ERR;1                   CDMHWPVS1HWCDMA.LOG;1
CDMHWPVS2HWCDMA.COM;1                   CDMHWPVS2HWCDMA.DAT;1
CDMHWPVSDHWCDMA.COM;2                   CDMHWPVSDHWCDMA.DAT;2
CDMHWPVSEHWCDMA.COM;2                   CDMHWPVSEHWCDMA.DAT;2

Total of 10 files.

Grand total of 2 directories, 30 files.




DKA100 – COM Files


******************************
DKA100:[SYS0.SYSCOMMON.SYSMGR]PVS_LOGICALS.COM;29

$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

******************************
DKA100:[SYS0.SYSCOMMON.SYSMGR]PVS_TERMINALS.COM;121

$!**   1.0    5-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **

******************************
DKA100:[SYS0.SYSCOMMON.SYSMGR]SETUP_PVS.COM;1

$    IF F$TRNLNM("sys$node") .EQS. "HWPVSD::"
$      DEFINE pvsremote HWPVSE
$      DEFINE pvsremote HWPVSD
$! For testing, make HWPVSB the remote machine
$!   DEFINE pvsremote HWPVSB

******************************
DKA100:[SYS0.SYSCOMMON.SYSMGR]SYSTARTUP_PVS.COM;42

$!**   0.0   05-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **
$!**   0.3   01-Aug-1997  A.Dench         Making HWPVS1 and HWPVS2 the same   **
$ if f$getsyi("nodename") .EQS. "HWPVS1"
$	pvsdevice  = "HWPVS1$DKA0:"			         
$	ilvsdevice = "HWPVS1$DKA200:"
$	pvsdevice  = "HWPVS2$DKA100:"
$	ilvsdevice = "HWPVS2$DKA200:"
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"

******************************
DKA100:[SYS0.SYSCOMMON.SYSMGR]SYSTARTUP_VMS.COM;44

$ IF f$getsyi("nodename") .EQS. "HWPVS1" 
$ 	MOUNT/SYS     HWPVS1$DKA0:        PVS
$ 	MOUNT/SYS     HWPVS1$DKA200:      ILVS
$ 	MOUNT/SYS     HWPVS2$DKA100:      PVS
$ 	MOUNT/SYS     HWPVS2$DKA200:      ILVS

******************************
DKA100:[SYS0.SYSMGR]DEFNODE.COM;22

$    aes_nodes = "HWPVSD,HWPVSE" !will set SYSGEN parameters for remote support
$    exec1 = "HWPVSA\38.101\nonrouting\line DMF-0 state off\" +-
$    exec2 = "HWPVSB\38.102\area\line DMF-0 state on\circ UNA-0 state on"
$    exec3 = "HWPVSD\38.115\area"
$    exec4 = "HWPVSE\38.116\area"








DKA100:[SYS0.SYSMGR]TESTAUD.COM;25

$ write sys$output "* HWPVS1 SYSTEM              *"

******************************
DKA100:[SYSE.SYSCOMMON.SYSMGR]PVS_LOGICALS.COM;29

$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

******************************
DKA100:[SYSE.SYSCOMMON.SYSMGR]SETUP_PVS.COM;1

$    IF F$TRNLNM("sys$node") .EQS. "HWPVSD::"
$      DEFINE pvsremote HWPVSE
$      DEFINE pvsremote HWPVSD
$! For testing, make HWPVSB the remote machine
$!   DEFINE pvsremote HWPVSB

******************************
DKA100:[SYSE.SYSCOMMON.SYSMGR]SYSTARTUP_PVS.COM;42

$!**   0.0   05-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **
$!**   0.3   01-Aug-1997  A.Dench         Making HWPVS1 and HWPVS2 the same   **
$ if f$getsyi("nodename") .EQS. "HWPVS1"
$	pvsdevice  = "HWPVS1$DKA0:"			         
$	ilvsdevice = "HWPVS1$DKA200:"
$	pvsdevice  = "HWPVS2$DKA100:"
$	ilvsdevice = "HWPVS2$DKA200:"
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"

******************************
DKA100:[SYSE.SYSCOMMON.SYSMGR]SYSTARTUP_VMS.COM;44

$ IF f$getsyi("nodename") .EQS. "HWPVS1" 
$ 	MOUNT/SYS     HWPVS1$DKA0:        PVS
$ 	MOUNT/SYS     HWPVS1$DKA200:      ILVS
$ 	MOUNT/SYS     HWPVS2$DKA100:      PVS
$ 	MOUNT/SYS     HWPVS2$DKA200:      ILVS

******************************
DKA100:[USERS.AHOUGHTO]LOGIN.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW



******************************
DKA100:[USERS.BENDICK]BATCH-PAINT.COM;4

$  if node .eqs. "HWPVS2::" .or. node .eqs. "HWPVS1::"

******************************
DKA100:[USERS.CAPTIVE]LOGIN.COM;3

$	if t1 .eqs. "HWPVS1::"
$		h1 = "HWPVS2"
$		h1 = "HWPVS1"

******************************
DKA100:[USERS.CBARKE10]COPREPSPRINTER.COM;48

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVSD::" then printer="LTA2113:"

******************************
DKA100:[USERS.CBARKE10]LOGIN.COM;6

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.COSSON]TEST.COM;3

$copy/ftp/log OVERLAY_STRING.ORIG hwpvs2"$dcosson under98"::OVERLAY_STRING.ORIG

******************************
DKA100:[USERS.DCOSSON]Q.COM;7

$QUEUE = "HWPVS1_SERVICE"
/WSEXTENT=12000/PROT=(S:E,G:R,W:W,O:D) HWPVS1_SERVICE1

******************************
DKA100:[USERS.DMACDONALD]LOGIN.COM;6

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]COPOVERANAL.COM;2

$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA1901:"

******************************
DKA100:[USERS.DMCDERMO]FOSTER.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]LOGINDMC.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]LOGINMF.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]LOGINOLD.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]LOGINRA.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.DMCDERMO]SE_ALL_ZONES.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.DMCDERMO]SE_PAINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.DMCDERMO]SE_PLATE2.COM;1

$ copl foster:plate2.trp hwpvs2::foster:plate2.trp
$ copl foster:plate2.trp hwpvs1::foster:plate2.trp

******************************
DKA100:[USERS.DMCDERMO]SE_ZONES.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.DMCDERMO]SE_ZONES_COUNT.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.ELLIOTT]ILVS_LOGICALS.COM;64

$!                                       add HWPVS
$  IF "''nodename'" .EQS. "HWPVS1::" .OR. "''nodename'" .EQS. "HWPVS2::"
$       IF "''nodename'" .EQS. "HWPVS1::"
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS2
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS1

******************************
DKA100:[USERS.ELLIOTT]PVS_LOGICALS.COM;29

$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

******************************
DKA100:[USERS.ELLIOTT]PVS_TERMINALS.COM;3

$!**   1.0    5-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **

******************************
DKA100:[USERS.ELLIOTT]SYSTARTUP_PVS.COM;42

$!**   0.0   05-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **
$!**   0.3   01-Aug-1997  A.Dench         Making HWPVS1 and HWPVS2 the same   **
$ if f$getsyi("nodename") .EQS. "HWPVS1"
$	pvsdevice  = "HWPVS1$DKA0:"			         
$	ilvsdevice = "HWPVS1$DKA200:"
$	pvsdevice  = "HWPVS2$DKA100:"
$	ilvsdevice = "HWPVS2$DKA200:"
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"

******************************
DKA100:[USERS.ELLIOTT]SYSTARTUP_VMS.COM;44

$ IF f$getsyi("nodename") .EQS. "HWPVS1" 
$ 	MOUNT/SYS     HWPVS1$DKA0:        PVS
$ 	MOUNT/SYS     HWPVS1$DKA200:      ILVS
$ 	MOUNT/SYS     HWPVS2$DKA100:      PVS
$ 	MOUNT/SYS     HWPVS2$DKA200:      ILVS

******************************
DKA100:[USERS.FOREMAN]DELBODY.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]DELPATENT.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]DELREPS.COM;4

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]LOADEVENTS.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN]LOADREPS.COM;9

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN]LOAD_A_REP.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTG2:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA1803:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then printer="LTA1803:"
$ a		==	"hwpvsa::[*]*.*"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then goto NEW

******************************
DKA100:[USERS.FOREMAN]LOSTPATENT.COM;5

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]PATPLAT.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]PATPLATAMEND.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD
$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN]REP300UPDATE.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMA.COM;3

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMB.COM;5

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMC2.COM;3

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMD2.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMD3.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMP5.COM;3

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMR1.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMR2.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMR3.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMR4.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMX1X2.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADFORMX4.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADSOLVEA.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADSOLVEB.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]LOADSOLVER.COM;2

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]REPSLATOMAST.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]REPSMASTOSLA.COM;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]UPDATEREPS.COM;4

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]UPDATEREPSV2.COM;5

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]UPDATEREPSV3.COM;8

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOREMAN.COM]UPDATEREPSV4.COM;4

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOSTER]AMEND_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_old.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_new.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]amend_to_ibm.com

******************************
DKA100:[USERS.FOSTER]ANALYSE_SEQ.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]ANALYSE_TRIM.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNOPRINT
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWERRO

******************************
DKA100:[USERS.FOSTER]ANAL_FILE.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]COPFILEPRINTER.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]COPJOHNSPRINTER.COM;6

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA1901:"

******************************
DKA100:[USERS.FOSTER]COPNEWREPSPRINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]COPOVERANAL.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA1901:"

******************************
DKA100:[USERS.FOSTER]COPREPSLATOMAST.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]COPREPSPRINTER.COM;53

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]COPYFILE.COM;3

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOSTER]FILE_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_file.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]file_to_ibm.com

******************************
DKA100:[USERS.FOSTER]FOSTER.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOSTER]HELP.COM;5

$ copl foster:jump.trp hwpvs2::foster:jump.trp
$ copl foster:jump.trp hwpvs1::foster:jump.trp

******************************
DKA100:[USERS.FOSTER]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.FOSTER]MAKE_A_REP.COM;1

$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then printer="LTA8003:"

******************************
DKA100:[USERS.FOSTER]MAKE_REPS.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]OLDEST_04.COM;9

$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs1::REPBIN:OLDEST_04.TRP
$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs2::REPBIN:OLDEST_04.TRP

******************************
DKA100:[USERS.FOSTER]OLDEST_10.COM;6

$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs1::REPBIN:OLDEST_04.TRP
$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs2::REPBIN:OLDEST_04.TRP

******************************
DKA100:[USERS.FOSTER]OLDEST_21.COM;6

$  TYPE/TAIL=50 REPBIN:OLD_bodyjag.TRP /OUT=hwpvs1::REPBIN:OLDEST_bodyjag.TRP
$  TYPE/TAIL=50 REPBIN:OLD_bodyjag.TRP /OUT=hwpvs2::REPBIN:OLDEST_bodyjag.TRP

******************************
DKA100:[USERS.FOSTER]PH1.COM;1

$! 27-8-97  B. Bendick    changed machine names from HWPVSD, HWPVSE to
$!                        HWPVS1 and HWPVS2 resp.
$ if f$trnlnm ("pvslocal") .eqs. "HWPVS1" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVS2" then GOSUB NEW

******************************
DKA100:[USERS.FOSTER]PJGRAY.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.FOSTER]PLATE.COM;1

$ copl foster:plate.trp hwpvs2::foster:plate.trp
$ copl foster:plate.trp hwpvs1::foster:plate.trp

******************************
DKA100:[USERS.FOSTER]PRINT_ANAL.COM;2

$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]RE_ANALYSE.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]SE_ALL_ZONES.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]SE_PLATE2.COM;1

$ copl foster:plate2.trp hwpvs2::foster:plate2.trp
$ copl foster:plate2.trp hwpvs1::foster:plate2.trp

******************************
DKA100:[USERS.FOSTER]SE_PLATE3.COM;1

$ copl foster:plate3.trp hwpvs2::foster:plate3.trp
$ copl foster:plate3.trp hwpvs1::foster:plate3.trp

******************************
DKA100:[USERS.FOSTER]SE_PLATE4.COM;2

$ copl foster:plate.trp hwpvs2::foster:plate4.trp
$ copl foster:plate.trp hwpvs1::foster:plate4.trp

******************************
DKA100:[USERS.FOSTER]SE_PLATE5.COM;1

$ copl foster:plate3.trp hwpvs2::foster:plate3.trp
$ copl foster:plate3.trp hwpvs1::foster:plate3.trp

******************************
DKA100:[USERS.FOSTER]SE_PLATE_JAG.COM;2

$ copl foster:platej.trp hwpvs2::foster:platej.trp
$ copl foster:platej.trp hwpvs1::foster:platej.trp

******************************
DKA100:[USERS.FOSTER]SE_ZONES_COUNT.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]TEMP_TSM.COM;2

@mom$load:tsmaster.com HWPVS1

******************************
DKA100:[USERS.FOSTER]UNBUILT_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_unbuilt.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_unsold.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]unbuilt_to_ibm.com

******************************
DKA100:[USERS.FOSTER]UPDATECONFIG.COM;5

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.MELLING]LOGIN.COM;1

//$ h1		==	"hwpvs1::[*]*.*"
//$ h2		==	"hwpvs2::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sh1		==	"set host hwpvs1"
$ sh2		==	"set host hwpvs2"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"

******************************
DKA100:[USERS.MGRANNEL]AMEND_TO_IBM.COM;2

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_old.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_new.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]amend_to_ibm.com

******************************
DKA100:[USERS.MGRANNEL]ANALYSE_SEQ.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]ANALYSE_TRIM.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNOPRINT
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWERRO

******************************
DKA100:[USERS.MGRANNEL]ANAL_FILE.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]COPFILEPRINTER.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]COPJOHNSPRINTER.COM;6

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA1901:"

******************************
DKA100:[USERS.MGRANNEL]COPNEWREPSPRINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]COPOVERANAL.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA1901:"

******************************
DKA100:[USERS.MGRANNEL]COPREPSLATOMAST.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]COPREPSPRINTER.COM;53

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]COPYFILE.COM;3

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.MGRANNEL]FILE_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_file.trp    HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]file_to_ibm.com

******************************
DKA100:[USERS.MGRANNEL]FOSTER.COM;2

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.MGRANNEL]GOODLOGIN.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.MGRANNEL]HELP.COM;5

$ copl foster:jump.trp hwpvs2::foster:jump.trp
$ copl foster:jump.trp hwpvs1::foster:jump.trp

******************************
DKA100:[USERS.MGRANNEL]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.MGRANNEL]MAKE_A_REP.COM;1

$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVS2::" then printer="LTA8003:"

******************************
DKA100:[USERS.MGRANNEL]MAKE_REPS.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]OLDEST_04.COM;9

$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs1::REPBIN:OLDEST_04.TRP
$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs2::REPBIN:OLDEST_04.TRP

******************************
DKA100:[USERS.MGRANNEL]OLDEST_10.COM;6

$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs1::REPBIN:OLDEST_04.TRP
$	TYPE/TAIL=18 REPBIN:OLD_04.TRP /OUT=hwpvs2::REPBIN:OLDEST_04.TRP

******************************
DKA100:[USERS.MGRANNEL]OLDEST_21.COM;6

$  TYPE/TAIL=50 REPBIN:OLD_bodyjag.TRP /OUT=hwpvs1::REPBIN:OLDEST_bodyjag.TRP
$  TYPE/TAIL=50 REPBIN:OLD_bodyjag.TRP /OUT=hwpvs2::REPBIN:OLDEST_bodyjag.TRP

******************************
DKA100:[USERS.MGRANNEL]PH1.COM;1

$! 27-8-97  B. Bendick    changed machine names from HWPVSD, HWPVSE to
$!                        HWPVS1 and HWPVS2 resp.
$ if f$trnlnm ("pvslocal") .eqs. "HWPVS1" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVS2" then GOSUB NEW

******************************
DKA100:[USERS.MGRANNEL]PJGRAY.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.MGRANNEL]PLATE.COM;1

$ copl foster:plate.trp hwpvs2::foster:plate.trp
$ copl foster:plate.trp hwpvs1::foster:plate.trp

******************************
DKA100:[USERS.MGRANNEL]PRINT_ANAL.COM;2

$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]RE_ANALYSE.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]SE_ALL_ZONES.COM;4

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]SE_PLATE2.COM;1

$ copl foster:plate2.trp hwpvs2::foster:plate2.trp
$ copl foster:plate2.trp hwpvs1::foster:plate2.trp

******************************
DKA100:[USERS.MGRANNEL]SE_PLATE3.COM;1

$ copl foster:plate3.trp hwpvs2::foster:plate3.trp
$ copl foster:plate3.trp hwpvs1::foster:plate3.trp

******************************
DKA100:[USERS.MGRANNEL]SE_PLATE4.COM;2

$ copl foster:plate.trp hwpvs2::foster:plate4.trp
$ copl foster:plate.trp hwpvs1::foster:plate4.trp

******************************
DKA100:[USERS.MGRANNEL]SE_PLATE5.COM;1

$ copl foster:plate3.trp hwpvs2::foster:plate3.trp
$ copl foster:plate3.trp hwpvs1::foster:plate3.trp

******************************
DKA100:[USERS.MGRANNEL]SE_PLATE_JAG.COM;2

$ copl foster:platej.trp hwpvs2::foster:platej.trp
$ copl foster:platej.trp hwpvs1::foster:platej.trp

******************************
DKA100:[USERS.MGRANNEL]SE_ZONES_COUNT.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]TEMP_TSM.COM;2

@mom$load:tsmaster.com HWPVS1

******************************
DKA100:[USERS.MGRANNEL]UNBUILT_TO_IBM.COM;3

$ if "''thisnode'" .eqs. "HWPVSB::" then goto TRANSMISSION
$ copy/log    foster:fiddle_unbuilt.trp    HWPVSB::user$disk:[foster]*.*
$ copy/log    foster:fiddle_unsold.trp     HWPVSB::user$disk:[foster]*.*
$ submit/remote        HWPVSB::user$disk:[foster]unbuilt_to_ibm.com

******************************
DKA100:[USERS.MGRANNEL]UPDATECONFIG.COM;5

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.MURRELL]LOGIN.COM;7

$ pvs1=="set host hwpvs1"
$ pvs2=="set host hwpvs2"
$ pvsd=="set host hwpvsd"
$ pvse=="set host hwpvse"

******************************
DKA100:[USERS.MURRELL]LOGINMF.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.OLDUSERS.DARWIN]AUDITTRAIL.COM;11

$ write sys$output "HWPVS2 AUDIT TRAIL SYSTEM"

******************************
DKA100:[USERS.OLDUSERS.HELSBY]LOGIN.COM;1

$ h1		==	"hwpvs1::[*]*.*"
$ h2		==	"hwpvs2::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sh1		==	"set host hwpvs1"
$ sh2		==	"set host hwpvs2"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"

******************************
DKA100:[USERS.OLDUSERS.INGLESFIELD]LOGIN.COM;8

$!seta		==	"set host hwpvsa"
$!setb		==	"set host hwpvsb"
$ pvs1=="set host hwpvs1"
$ pvs2=="set host hwpvs2"
$ pvsd=="set host hwpvsd"
$ pvse=="set host hwpvse"

******************************
DKA100:[USERS.OLDUSERS.MCKENZIE]COPREPSPRINTER.COM;48

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVSD::" then printer="LTA2113:"

******************************
DKA100:[USERS.OLDUSERS.MCKENZIE]LOGIN.COM;6

$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"

******************************
DKA100:[USERS.OLDUSERS.MCKENZIE]LOGIN1.COM;1

$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]COPOVERANAL.COM;2

$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA1901:"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]FOSTER.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]LOGINOLD.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]NUMSOLVEC.COM;1

$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]SE_ALL_ZONES.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]SE_PAINT.COM;2

$ IF "''thisnode'" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD" -
.OR. "''thisnode'" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]SE_PLATE2.COM;1

$ copl foster:plate2.trp hwpvs2::foster:plate2.trp
$ copl foster:plate2.trp hwpvs1::foster:plate2.trp

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]SE_ZONES.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]SE_ZONES_COUNT.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.OLDUSERS.PSMIT105]LOGIN.COM;8

$ pvs1=="set host hwpvs1"
$ pvs2=="set host hwpvs2"
$ pvsd=="set host hwpvsd"
$ pvse=="set host hwpvse"

******************************
DKA100:[USERS.OPERATOR]CREATE_TESTAUD.COM;6

$! Copies testaud and all necessary files from HWPVS2 to HWPVS1
$ Copy hwpvs2::user$disk:[operator]testaud.com *.*
$ Copy hwpvs2::user$disk:[operator]date_lastrun.dat *.*
$ copy hwpvs2::user$disk:[operator]date_lastreq.dat *.*

******************************
DKA100:[USERS.OPERATOR]OFFLINE4_REP.COM;2

$ copy repbin:offline_rep.trp hwpvs2::repbin:offline_rep.trp

******************************
DKA100:[USERS.PHARRIS3]BERT.COM;4

$	if t1 .eqs. "HWPVS1::"
$		h1 = "HWPVS2"
$		h1 = "HWPVS1"

******************************
DKA100:[USERS.PHOYTE]LOGIN.COM;3

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[USERS.PVS_STARTUP]GET_TRIPOS.COM;2

$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[BTRACE]*.* -
$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[BTRACE.BCPL]*.* -
$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[C]*.* -
$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[INFO]*.* -
$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[S]*.* -
$	COPY/LOG HWPVSE"DENCH CLAIRETI"::PVS$DISK:[TRIPOS]*.* -

******************************
DKA100:[USERS.PVS_STARTUP]ILVS_LOGICALS.COM;6

$! 005-05   12-MAR-1997   A Dench        Added HWPVS1 / 2
$  IF "''nodename'" .EQS. "HWPVS1::" .OR. "''nodename'" .EQS. "HWPVS2::"
$       IF "''nodename'" .EQS. "HWPVS1::"
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS2
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS1

******************************
DKA100:[USERS.PVS_STARTUP]PVS_PLANT_SETUP.COM;4

$  WRITE SYS$OUTPUT "Getting PVS files from HWPVSE "
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.config]system.trp config:           
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.config]tables.trp config:
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.config]commands.trp config:
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.config]events.trp config:           
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.config]messtable.trp config:           
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsuser.analysis]solve*.trp analysis:       
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsuser.format]form*.trp format:            
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsuser.report]rep*.trp report:             
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.vob]clearvob.com vob:               
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.vob]*.fdl vob:                         
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsdata.vob]*.trp vob:                         
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsuser.pool]new.trp pool:                  
$    COPY/L HWPVSE"DENCH CLAIRETI"::PVS$DISK:[pvsuser.messages]english.trp messages:      

******************************
DKA100:[USERS.THAKKAR.PVS]PVS_LOGICALS.COM;29

$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

******************************
DKA100:[USERS.THAKKAR.PVS]PVS_TERMINALS.COM;121

$!**   1.0    5-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **

******************************
DKA100:[USERS.THAKKAR.PVS]SETUP_PVS.COM;1

$    IF F$TRNLNM("sys$node") .EQS. "HWPVSD::"
$      DEFINE pvsremote HWPVSE
$      DEFINE pvsremote HWPVSD
$! For testing, make HWPVSB the remote machine
$!   DEFINE pvsremote HWPVSB

******************************
DKA100:[USERS.THAKKAR.PVS]SYSTARTUP_PVS.COM;42

$!**   0.0   05-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **
$!**   0.3   01-Aug-1997  A.Dench         Making HWPVS1 and HWPVS2 the same   **
$ if f$getsyi("nodename") .EQS. "HWPVS1"
$	pvsdevice  = "HWPVS1$DKA0:"			         
$	ilvsdevice = "HWPVS1$DKA200:"
$	pvsdevice  = "HWPVS2$DKA100:"
$	ilvsdevice = "HWPVS2$DKA200:"
$  IF nodename .eqs. "HWPVS1::" THEN othernode = "HWPVS2"
$  IF nodename .eqs. "HWPVS2::" THEN othernode = "HWPVS1"

******************************
DKA100:[USERS.THOMPSON]COPREPSPRINTER.COM;48

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS1::" -
.OR. "''thisnode'" .eqs. "HWPVSD::" then printer="LTA2113:"

******************************
DKA100:[USERS.THOMPSON]LOGIN.COM;6

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$! 1		==	"hwpvs1::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.UNDERWOOD]LOGIN.COM;1

$ if "''thisnode'" .eqs. "HWPVS2::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then printer="LTA2113:"
$    h1		 == 	"set host hwpvs1"
$    h2		 == 	"set host hwpvs2"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVS1::" then goto NEW

******************************
DKA100:[USERS.WKERR]LOGIN.COM;1

$ IF "''thisnode'" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then printer="LTA2113:"
$ b		==	"hwpvsb::[*]*.*"
$ d		==	"hwpvsd::[*]*.*"
$ e		==	"hwpvse::[*]*.*"
$ h1		==	"set host hwpvs1"
$ h2		==	"set host hwpvs2"
$ sa		==	"set host hwpvsa"
$ sb		==	"set host hwpvsb"
$ sd		==	"set host hwpvsd"
$ se		==	"set host hwpvse"
$ if "''thisnode'" .eqs. "HWPVSB::" then goto OLD
$ if "''thisnode'" .eqs. "HWPVSD::" -
.OR. "''thisnode'" .eqs. "HWPVSE::" then goto NEW

******************************
DKA100:[VMS$COMMON.SYSMGR]PVS_LOGICALS.COM;29

$    if f$trnlnm("SYS$NODE") .EQS. "HWPVS1::"

******************************
DKA100:[VMS$COMMON.SYSMGR]PVS_TERMINALS.COM;121

$!**   1.0    5-Mar-1997  A.Dench         Installation of HWPVS1 and HWPVS2   **

******************************
DKA100:[VMS$COMMON.SYSMGR]SETUP_PVS.COM;1

$    IF F$TRNLNM("sys$node") .EQS. "HWPVSD::"
$      DEFINE pvsremote HWPVSE
$      DEFINE pvsremote HWPVSD
$! For testing, make HWPVSB the remote machine
$!   DEFINE pvsremote HWPVSB



DKA100 – LIS Files



******************************
DKA100:[SYS0.SYSCOMMON.SYSEXE]SYSUAF.LIS;2

OPCON FTP Account    FTPHWPVS         [50,301]    PVS      Normal  4 PVS_USER:[OPCON]
ILVS metrics access  ILVSMEAS         [50,2]      PVS      Group   4 HWPVS1$DKA200:[ILVS.ILVSSOURCE.ILVSTEST]

******************************
DKA100:[SYS0.SYSEXE]SYSUAF.LIS;3

OPCON FTP Account    FTPHWPVS         [50,301]    PVS      Normal  4 PVS_USER:[OPCON]
ILVS metrics access  ILVSMEAS         [50,2]      PVS      Group   4 HWPVS1$DKA200:[ILVS.ILVSSOURCE.ILVSTEST]

******************************
DKA100:[SYS0.SYSMGR]CLUE$LAST_HWPVS1.LIS;1

                                              HWPVS1 Uptime:   0 00:00:06
CLUE /OUT=CLUE$LAST_HWPVS1.LIS /BIN=CLUE$HISTORY.DATA /LOCAL SYS$SYSROOT:[SYSEXE]SYSDUMP.DMP;1
Operator Shutdown on Node HWPVS1 V6.2     at 14-JAN-2014 17:53:35.66

******************************
DKA100:[SYS0.SYSMGR]CLUE$LAST_HWPVS2.LIS;1

                                              HWPVS2 Uptime:   0 00:00:12
CLUE /OUT=CLUE$LAST_HWPVS2.LIS /BIN=CLUE$HISTORY.DATA /LOCAL SYS$SYSROOT:[SYSEXE]SYSDUMP.DMP;1
Operator Shutdown on Node HWPVS2 V6.2     at 22-FEB-2004 10:18:30.34

******************************
DKA100:[SYS0.SYSMGR]MONTHLY_AUDIT.LIS;3

Welcome to HWPVS2 Monthly Audit
HWPVS2 dir/dat/size *.tmp
HWPVS2 dir/dat/size *.log
HWPVS2 ty audited_session.txt

******************************
DKA100:[SYSE.SYSCOMMON.SYSEXE]SYSUAF.LIS;2

OPCON FTP Account    FTPHWPVS         [50,301]    PVS      Normal  4 PVS_USER:[OPCON]
ILVS metrics access  ILVSMEAS         [50,2]      PVS      Group   4 HWPVS1$DKA200:[ILVS.ILVSSOURCE.ILVSTEST]

******************************
DKA100:[USERS.ALLEN]DAILY_AUDIT.LIS;31

  HOST = "HWPVS1"
Support access for $runderwo because check account is working on hwpvs1 at  9-AUG-2007 12:31

******************************
DKA100:[USERS.COSSON]FILES.LIS;2


Files accessed on device HWPVS1$DKA0: on 27-NOV-2013 20:38:49.21


******************************
DKA100:[USERS.COSSON]SYS.LIS;8

OpenVMS V6.2  on node HWPVS1   9-DEC-2013 20:58:25.93  Uptime  20 04:08:33

******************************
DKA100:[USERS.COSSON]TASK.LIS;1

DKA0:[MBXLNK]CDMHWPVS1HWCDMA.DAT;764
DKA0:[MBXLNK]CDMHWPVS1HWCDMA.LOG;597
DKA0:[MBXLNK]CDMHWPVS2HWCDMA.DAT;1420
DKA0:[MBXLNK]CDMHWPVS2HWCDMA.LOG;1277
DKA0:[MBXLNK]CDMHWPVSDHWCDMA.DAT;2
DKA0:[MBXLNK]CDMHWPVSEHWCDMA.DAT;2
DKA0:[MBXLNK]MCIHWPVS1HWPVSD.DAT;234
DKA0:[MBXLNK]MCIHWPVS1HWPVSD.LOG;188
DKA0:[MBXLNK]MCIHWPVS1HWPVSE.DAT;220
DKA0:[MBXLNK]MCIHWPVS1HWPVSE.LOG;184
DKA0:[MBXLNK]MCIHWPVS2HWPVSD.DAT;178
DKA0:[MBXLNK]MCIHWPVS2HWPVSD.LOG;153
DKA0:[MBXLNK]MCIHWPVS2HWPVSE.DAT;201
DKA0:[MBXLNK]MCIHWPVS2HWPVSE.LOG;172
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVS1HWCDMA.DAT;1
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVS1HWCDMA.LOG;1
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVS2HWCDMA.DAT;1
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVSDHWCDMA.DAT;2
DKA0:[PVS$COMMON.PVSDUP]CDMHWPVSEHWCDMA.DAT;2

******************************
DKA100:[USERS.DCOSSON]D.LIS;1

$1$DKA0:      (HWPVS1)  ShadowSetMember      0  (member of DSA0:)
$1$DKA100:    (HWPVS1)  ShadowSetMember      0  (member of DSA100:)
$1$DKA200:    (HWPVS1)  ShadowSetMember      0  (member of DSA200:)
$1$DKB0:      (HWPVS1)  ShadowSetMember      0  (member of DSA0:)
$1$DKB100:    (HWPVS1)  Online               0
$1$DKB200:    (HWPVS1)  ShadowSetMember      0  (member of DSA200:)
$1$DKB300:    (HWPVS1)  ShadowSetMember      0  (member of DSA100:)
HWPVS1$MKA500:          Online               0


******************************
DKA100:[USERS.OPERATOR]F.LIS;2

SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSMSG]SCNMSG.EXE;1
SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSEXE]UCX$SMTP_SYMBIONT.EXE;4
SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSLIB]SMBSRVSHR.EXE;1
SMTP_HWPVS1_01  00000216  [SYS0.UCX_SMTP]UCX$SMTP_LOGFILE.LOG;822
SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSEXE]UCX$HOST.DAT;1
SMTP_HWPVS1_01  00000216  [USERS.KENYANI]13062823444556_$SKENYANI.UCX_HWPVS1;1
SMTP_HWPVS1_01  00000216  [USERS.KENYANI]13062823444556_$SKENYANI.UCX_HWPVS1_TEXT;1
Operator        000012EF  [USERS.KENYANI]13070509413702_$SKENYANI.UCX_HWPVS1;1

******************************
DKA100:[USERS.OPERATOR]FRED.LIS;1

SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSMSG]SCNMSG.EXE;1
SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSEXE]UCX$SMTP_SYMBIONT.EXE;4
SMTP_HWPVS1_01  00000216  [SYSCOMMON.SYSLIB]SMBSRVSHR.EXE;1
SMTP_HWPVS1_01  00000216  [SYS0.UCX_SMTP]UCX$SMTP_LOGFILE.LOG;822
SMTP_HWPVS1_01  00000216  [USERS.KENYANI]13062909052562_$SKENYANI.UCX_HWPVS1;1
SMTP_HWPVS1_01  00000216  [USERS.KENYANI]13062909052562_$SKENYANI.UCX_HWPVS1_TEXT;1
Operator        000012C7  [USERS.KENYANI]13070508125926_$SKENYANI.UCX_HWPVS1;1

******************************
DKA100:[USERS.OPERATOR]MONTHLY_REPORT.LIS;4

 HWPVS1   

******************************
DKA100:[USERS.OPERATOR]QUEUE.LIS;3

Batch queue PVS$BATCH, idle, on HWPVS1::
Batch queue SYS$BATCH, idle, on HWPVS1::
Generic server queue UCX$SMTP_HWPVS1_00, stopped
Server queue UCX$SMTP_HWPVS1_01, idle, on HWPVS1::, mounted form DEFAULT
Batch queue WEB$BATCH, idle, on HWPVS1::

******************************
DKA100:[USERS.OPERATOR]USERLIST.LIS;54

 $GWILKIN8  Operator         00019F5E  RTA1:    (HWPVS2::PORTAL)
 $RALLEN17  $RALLEN17        00019E73  RTA3:    (HWPVS2::PORTAL)

******************************
DKA100:[VMS$COMMON.SYSEXE]SYSUAF.LIS;2

OPCON FTP Account    FTPHWPVS         [50,301]    PVS      Normal  4 PVS_USER:[OPCON]
ILVS metrics access  ILVSMEAS         [50,2]      PVS      Group   4 HWPVS1$DKA200:[ILVS.ILVSSOURCE.ILVSTEST]



DKA100 Log Files



******************************
DKA100:[SYS0.MAIL$SERVER]NETSERVER.LOG;11627

            from remote process HWPVS2::"0=$MCORCORAN"

******************************
DKA100:[SYS0.SYSMGR]NETSERVER.LOG;3

            from remote process HWPVS1::"0=SYSTEM"

******************************
DKA100:[SYS0.SYSMGR]OPERATOR.LOG;922

Logfile has been initialized by operator _HWPVS1$TNA90:
Logfile is HWPVS1::SYS$SYSROOT:[SYSMGR]OPERATOR.LOG;922
Operator status for operator HWPVS1::SYS$SYSROOT:[SYSMGR]OPERATOR.LOG;922
Message from user INTERnet on HWPVS1
Message from user INTERnet on HWPVS1
Message from user INTERnet on HWPVS1
******************************
DKA100:[SYS0.UCX_SMTP]UCX$SMTP_LOGFILE.LOG;851

%UCX-I-SMTP_SYMBRUN, Symbiont is running the queue UCX$SMTP_HWPVS1_01

******************************
DKA100:[UCX$FTP]UCX$FTPD_OLD.LOG;2440

		UCX$FTPD server started on 
		HWPVS1.jaguar.ford.com	10-FEB-2014 15:05:55.98


******************************
DKA100:[UCX$POP]UCX$POP_RECV_STARTUP.LOG;4

2004-06-18 19:34:58 starting UCX POP server UCX V4.2-21F, OpenVMS V6.2 VAX on host HWPVS1.jaguar.ford.com and port 110

******************************
DKA100:[USERS.AHOUGHTO]NETSERVER.LOG;262

            from remote process HWPVS2::"0=AHOUGHTO"

******************************
DKA100:[USERS.ALLEN]NETSERVER.LOG;42

            from remote process HWPVS2::"0=RALLEN17"

******************************
DKA100:[USERS.ASAXBY]NETSERVER.LOG;88

            from remote process HWPVS2::"0=ASAXBY"

******************************
DKA100:[USERS.BENDICK]NETSERVER.LOG;191

            from remote process HWPVS1::"0=BENDICK"

******************************
DKA100:[USERS.CBARKE10]ASEQ.LOG;689

NODE : HWPVS2

******************************
DKA100:[USERS.CBARKE10]NETSERVER.LOG;2214

            from remote process HWPVS2::"0=JTHOMP14"
            from remote process HWPVS2::"0=JTHOMP14"

******************************
DKA100:[USERS.CORCORAN]NETSERVER.LOG;396

            from remote process HWPVS2::"0=$MCORCORAN"

******************************
DKA100:[USERS.COSSON]NETSERVER.LOG;2

            from remote process HWPVS2::"0=$DCOSSON"
            from remote process HWPVS2::"0=$DCOSSON"
            from remote process HWPVS2::"0=$DCOSSON"

******************************
DKA100:[USERS.DCOSSON]NETSERVER.LOG;5

            from remote process HWPVS1::"0=$DCOSSON"

******************************
DKA100:[USERS.DCOSSON]USERLOG.LOG;2

  1     (Remote)            Connected       HWPVS1
  3     (Remote)            Connected       HWPVS1
 10     (Remote)            Connected       HWPVS1
 11     (Remote)            Connected       HWPVS1

******************************
DKA100:[USERS.DMACDONALD]NETSERVER.LOG;134

            from remote process HWPVS2::"0=DMACDO21"

******************************
DKA100:[USERS.DMCDERMO]ASEQ.LOG;27

NODE : HWPVS2

******************************
DKA100:[USERS.DMCDERMO]NETSERVER.LOG;893

            from remote process HWPVS2::"0=DMCDERMO"

******************************
DKA100:[USERS.DMCDERMO]OVER_ANAL.LOG;51

%COPY-S-COPIED, USER$DISK:[FOSTER]OVER_ANAL_1.TRP;1 copied to HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 (10 blocks)

******************************
DKA100:[USERS.ELLIOTT]NETSERVER.LOG;1

            from remote process HWPVS1::"0=$WELLIOTT"

******************************
DKA100:[USERS.ETENNANT]NETSERVER.LOG;7

            from remote process HWPVS2::"0=ETENNANT"

******************************
DKA100:[USERS.FOREMAN]ASEQ.LOG;5

NODE : HWPVS1

******************************
DKA100:[USERS.FOREMAN]DELBODY.LOG;1

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTG2:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA1803:"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]DELPATENT.LOG;1

$    nodename = "HWPVSE"
$    thisnode       == "HWPVSE"
$    othernode      == "HWPVSD::"
$ IF "HWPVSE::" .EQS. "HWPVSB::" THEN printer="TTG2:"
$ if "HWPVSE::" .eqs. "HWPVSD::" -
.OR. "HWPVSE::" .eqs. "HWPVSE::" then printer="LTA1803:"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOREMAN]ECSS_SEQ.LOG;1

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTG2:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA1803:"
$    DELETE/LOG HWPVSE::ecss:carin.dat;*
%DELETE-I-FILDEL, HWPVSE::PVS_DATA:[ECSS]CARIN.DAT;1 deleted (3 blocks)
%COPY-S-COPIED, PVS_DATA:[ECSS]CARIN.DAT;2 copied to HWPVSE::PVS_DATA:[ECSS]CARIN.DAT;1 (1 block)

******************************
DKA100:[USERS.FOREMAN]NETSERVER.LOG;2233

            from remote process HWPVS1::"0=PATTERSON"

******************************
DKA100:[USERS.FOSTER]ANALYSE_SHIP.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]ANALYSE_TRIM.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"
$ if f$search ("HWPVSE::sys:[t]frame_*.trp")    .nes. "" then -
delete/log HWPVSE::sys:[t]frame_*.trp;*
$ if f$search ("HWPVSE::sys:[t]ship_*.trp")     .nes. "" then -
delete/log HWPVSE::sys:[t]ship_*.trp;*
$ if f$search ("HWPVSE::sys:[t]trim_*.trp")     .nes. "" then -
delete/log HWPVSE::sys:[t]trim_*.trp;*
$ copy/log	sys:[t]frame_anal_1.trp		HWPVSE::sys:[t]
%COPY-S-COPIED, SYS:[T]FRAME_ANAL_1.TRP;1 copied to HWPVSE::SYS:[T]FRAME_ANAL_1.TRP;1 (6 blocks)
$ copy/log	sys:[t]ship_anal_1.trp		HWPVSE::sys:[t]
%COPY-S-COPIED, SYS:[T]SHIP_ANAL_1.TRP;1 copied to HWPVSE::SYS:[T]SHIP_ANAL_1.TRP;1 (6 blocks)
$ copy/log	sys:[t]ship_anal_k1.trp		HWPVSE::sys:[t]
%COPY-S-COPIED, SYS:[T]SHIP_ANAL_K1.TRP;1 copied to HWPVSE::SYS:[T]SHIP_ANAL_K1.TRP;1 (4 blocks)
$ copy/log	sys:[t]trim_anal_1.trp		HWPVSE::sys:[t]
%COPY-S-COPIED, SYS:[T]TRIM_ANAL_1.TRP;1 copied to HWPVSE::SYS:[T]TRIM_ANAL_1.TRP;1 (6 blocks)
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14

******************************
DKA100:[USERS.FOSTER]ASEQ.LOG;19

NODE : HWPVS2

******************************
DKA100:[USERS.FOSTER]CE14P2VAR.LOG;1

$ copy/log	eocs:*p2_*.trp		HWPVSD::pvs_user:[eocs]*.*
%COPY-S-COPIED, PVS_USER:[EOCS]3DRRHDP2_01.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]3DRRHDP2_01.TRP;3 (4 blocks)
%COPY-S-COPIED, PVS_USER:[EOCS]5DRRHDP2_01.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]5DRRHDP2_01.TRP;4 (9 blocks)
%COPY-S-COPIED, PVS_USER:[EOCS]5DRRHDP2_02.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]5DRRHDP2_02.TRP;4 (9 blocks)
%COPY-S-COPIED, PVS_USER:[EOCS]5DRRHDP2_03.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]5DRRHDP2_03.TRP;4 (9 blocks)

******************************
DKA100:[USERS.FOSTER]CE14SEQUENCE.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ copy/log	foster:ce14sequence.com        HWPVSE::user$disk:[foster]*.*
%COPY-S-COPIED, USER$DISK:[FOSTER]CE14SEQUENCE.COM;1 copied to HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;2 (14 blocks)
$ copy/log	foster:C24platcards.sav  HWPVSE::user$disk:[foster]*.*
%COPY-S-COPIED, USER$DISK:[FOSTER]C24PLATCARDS.SAV;1 copied to HWPVSE::USER$DISK:[FOSTER]C24PLATCARDS.SAV;1 (82 blocks)
$ if f$search ("HWPVSE::user$disk:[foster]ce14sequence.com;-1") .nes. ""
$   purge/log	HWPVSE::user$disk:[foster]ce14sequence.com
%PURGE-I-FILPURG, HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;1 deleted (16 blocks)
$   rename/log	HWPVSE::user$disk:[foster]ce14sequence.com ;1
%RENAME-I-RENAMED, HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;2 renamed to HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;1

******************************
DKA100:[USERS.FOSTER]COMMITTED.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ copy/log	foster:prod_system.trp	    HWPVSE::ecss:trans03.trp
%COPY-S-COPIED, USER$DISK:[FOSTER]PROD_SYSTEM.TRP;1 copied to HWPVSE::PVS_DATA:[ECSS]TRANS03.TRP;5 (775 blocks)
$ copy/log	ecss:overlay_master.txt	    HWPVSE::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;1 copied to HWPVSE::PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;6 (629 blocks)
$ copy/log	ecss:overlay_string.txt	    HWPVSE::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_STRING.TXT;1 copied to HWPVSE::PVS_DATA:[ECSS]OVERLAY_STRING.TXT;6 (630 blocks)

******************************
DKA100:[USERS.FOSTER]COMMIT_ANAL.LOG;1

%COPY-S-COPIED, USER$DISK:[FOSTER]COM_ANAL_1.TRP;1 copied to HWPVSD::SYS:[T]COM_ANAL_1.TRP;1 (13 blocks)

******************************
DKA100:[USERS.FOSTER]COMMIT_TRANS.LOG;19

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ thisnode = "HWPVSD"

******************************
DKA100:[USERS.FOSTER]COM_SLAVE.LOG;10

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOSTER]DELBODY.LOG;26

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.FOSTER]ECSS_SEQ.LOG;53

%DELETE-I-FILDEL, HWPVSD::PVS_DATA:[ECSS]CARIN.DAT;1 deleted (3 blocks)
%COPY-S-COPIED, PVS_DATA:[ECSS]CARIN.DAT;2 copied to HWPVSD::PVS_DATA:[ECSS]CARIN.DAT;1 (1 block)

******************************
DKA100:[USERS.FOSTER]NETSERVER.LOG;4020

            from remote process HWPVS2::"0=MFOSTER5"
            from remote process HWPVS2::"0=MFOSTER5"

******************************
DKA100:[USERS.FOSTER]NUMSOLVEC.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOSTER]OVERLAY.LOG;5

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then goto OLD
$ copy/log	court:rep399.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP399.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP399.TRP;7 (5 blocks)
$ copy/log	court:rep499.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP499.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP499.TRP;7 (4 blocks)
$ copy/log	court:rep712.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP712.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP712.TRP;7 (4 blocks)
$ copy/log	ecss:overlay_master.txt		HWPVSB::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;1 copied to HWPVSB::PVS_USER:[ECSS]OVERLAY_MASTER.TXT;28 (504 blocks)
$ copy/log	ecss:overlay_string.txt		HWPVSB::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_STRING.TXT;1 copied to HWPVSB::PVS_USER:[ECSS]OVERLAY_STRING.TXT;29 (506 blocks)
$ submit/remote        HWPVSB::user$disk:[foster]overl_trans.com

******************************
DKA100:[USERS.FOSTER]OVERL_TRANS.LOG;5

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]OVER_ANAL.LOG;1

%DELETE-I-FILDEL, HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 deleted (15 blocks)
%COPY-S-COPIED, USER$DISK:[FOSTER]OVER_ANAL_1.TRP;1 copied to HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 (13 blocks)

******************************
DKA100:[USERS.FOSTER]OVER_SLAVE.LOG;14

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ thisnode = "HWPVSD"
$ IF thisnode .EQS. "HWPVSA" .OR. thisnode .EQS. "HWPVSB" THEN printer="TTE4:"
$ IF thisnode .EQS. "HWPVSD" .OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]PRINT_ANAL.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"
$ thisnode = "HWPVSD"
$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]TEMPREPSUPAB.LOG;9

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD
$ copy/log	court:rep*.tmp,rep*.txt		HWPVSB::user$disk:[court]
%COPY-S-COPIED, USER$DISK:[COURT]REP253.TMP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP253.TMP;2 (2 blocks)
%COPY-S-COPIED, USER$DISK:[COURT]REP2532.TMP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP2532.TMP;2 (3 blocks)
%COPY-S-COPIED, USER$DISK:[COURT]REP301.TMP;1 copied to 
$ submit/remote		HWPVSB::user$disk:[court]temprepsupab.com

******************************
DKA100:[USERS.FOSTER]UNNUMSOLVEC.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.FOSTER]UNSOLD.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.FOSTER]UPDATECONFIG.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"
$ copy/log	foster:block.tmp	HWPVSA::config:block.trp
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]BLOCK.TMP;1 copied to HWPVSA::PVS_DATA:[CONFIG]BLOCK.TRP;2 (1 block)
$ copy/log	foster:3dr.tmp		HWPVSA::config:3dr.trp
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]3DR.TMP;1 copied to 
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]ECSS_RUN.TMP;1 copied to HWPVSA::PVS_SYS:[COMMANDS]ECSS_RUN.COM;2 (35 blocks)

******************************
DKA100:[USERS.HEINLEIN]NETSERVER.LOG;138

            from remote process HWPVS2::"0=HEINLEIN"

******************************
DKA100:[USERS.JANNING]NETSERVER.LOG;2

            from remote process HWPVS2::"0=JANNING"

******************************
DKA100:[USERS.KENYANI]NETSERVER.LOG;2

            from remote process HWPVS2::"0=$SKENYANI"
            from remote process HWPVS2::"0=$SKENYANI"
            from remote process HWPVS2::"0=$SKENYANI"
            from remote process HWPVS2::"0=$SKENYANI"
            

******************************
DKA100:[USERS.MELLING]ASEQ.LOG;692

NODE : HWPVS2

******************************
DKA100:[USERS.MELLING]NETSERVER.LOG;1779

            from remote process HWPVS2::"0=CMELLING"
            from remote process HWPVS2::"0=CMELLING"

******************************
DKA100:[USERS.MGRANNEL]ANALYSE_SHIP.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]ANALYSE_TRIM.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"
$ if f$search ("HWPVSE::sys:[t]frame_*.trp")    .nes. "" then -
delete/log HWPVSE::sys:[t]frame_*.trp;*
$ if f$search ("HWPVSE::sys:[t]ship_*.trp")     .nes. "" then -
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" -
.or. f$trnlnm ("pvslocal") .eqs. "HWPVSE" then goto NEWNEXT14

******************************
DKA100:[USERS.MGRANNEL]ASEQ.LOG;19

NODE : HWPVS2

******************************
DKA100:[USERS.MGRANNEL]CE14P2VAR.LOG;1

$ copy/log	eocs:*p2_*.trp		HWPVSD::pvs_user:[eocs]*.*
%COPY-S-COPIED, PVS_USER:[EOCS]3DRRHDP2_01.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]3DRRHDP2_01.TRP;3 (4 blocks)
%COPY-S-COPIED, PVS_USER:[EOCS]5DRRHDP2_01.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]5DRRHDP2_01.TRP;4 (9 blocks)
%COPY-S-COPIED, PVS_USER:[EOCS]5DRRHDP2_02.TRP;1 copied to HWPVSD::PVS_USER:[EOCS]5DRRHDP2_02.TRP;4 (9 blocks)

******************************
DKA100:[USERS.MGRANNEL]CE14SEQUENCE.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ copy/log	foster:ce14sequence.com        HWPVSE::user$disk:[foster]*.*
%COPY-S-COPIED, USER$DISK:[FOSTER]CE14SEQUENCE.COM;1 copied to HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;2 (14 blocks)
$ copy/log	foster:C24platcards.sav  HWPVSE::user$disk:[foster]*.*
%COPY-S-COPIED, USER$DISK:[FOSTER]C24PLATCARDS.SAV;1 copied to HWPVSE::USER$DISK:[FOSTER]C24PLATCARDS.SAV;1 (82 blocks)
$ if f$search ("HWPVSE::user$disk:[foster]ce14sequence.com;-1") .nes. ""
$   purge/log	HWPVSE::user$disk:[foster]ce14sequence.com
%PURGE-I-FILPURG, HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;1 deleted (16 blocks)
$   rename/log	HWPVSE::user$disk:[foster]ce14sequence.com ;1
%RENAME-I-RENAMED, HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;2 renamed to HWPVSE::USER$DISK:[FOSTER]CE14SEQUENCE.COM;1

******************************
DKA100:[USERS.MGRANNEL]COMMITTED.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ copy/log	foster:prod_system.trp	    HWPVSE::ecss:trans03.trp
%COPY-S-COPIED, USER$DISK:[FOSTER]PROD_SYSTEM.TRP;1 copied to HWPVSE::PVS_DATA:[ECSS]TRANS03.TRP;5 (775 blocks)
$ copy/log	ecss:overlay_master.txt	    HWPVSE::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;1 copied to HWPVSE::PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;6 (629 blocks)
$ copy/log	ecss:overlay_string.txt	    HWPVSE::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_STRING.TXT;1 copied to HWPVSE::PVS_DATA:[ECSS]OVERLAY_STRING.TXT;6 (630 blocks)

******************************
DKA100:[USERS.MGRANNEL]COMMIT_ANAL.LOG;1

%COPY-S-COPIED, USER$DISK:[FOSTER]COM_ANAL_1.TRP;1 copied to HWPVSD::SYS:[T]COM_ANAL_1.TRP;1 (13 blocks)

******************************
DKA100:[USERS.MGRANNEL]COMMIT_TRANS.LOG;19

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ thisnode = "HWPVSD"

******************************
DKA100:[USERS.MGRANNEL]COM_SLAVE.LOG;10

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.MGRANNEL]DELBODY.LOG;26

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD

******************************
DKA100:[USERS.MGRANNEL]ECSS_SEQ.LOG;53

%DELETE-I-FILDEL, HWPVSD::PVS_DATA:[ECSS]CARIN.DAT;1 deleted (3 blocks)
%COPY-S-COPIED, PVS_DATA:[ECSS]CARIN.DAT;2 copied to HWPVSD::PVS_DATA:[ECSS]CARIN.DAT;1 (1 block)

******************************
DKA100:[USERS.MGRANNEL]NETSERVER.LOG;7

            from remote process HWPVS2::"0=MGRANNEL"

******************************
DKA100:[USERS.MGRANNEL]NUMSOLVEC.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.MGRANNEL]OVERLAY.LOG;5

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then goto OLD
$ copy/log	court:rep399.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP399.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP399.TRP;7 (5 blocks)
$ copy/log	court:rep499.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP499.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP499.TRP;7 (4 blocks)
$ copy/log	court:rep712.trp		HWPVSB::user$disk:[court]*.*
%COPY-S-COPIED, USER$DISK:[COURT]REP712.TRP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP712.TRP;7 (4 blocks)
$ copy/log	ecss:overlay_master.txt		HWPVSB::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_MASTER.TXT;1 copied to HWPVSB::PVS_USER:[ECSS]OVERLAY_MASTER.TXT;28 (504 blocks)
$ copy/log	ecss:overlay_string.txt		HWPVSB::ecss:*.*
%COPY-S-COPIED, PVS_DATA:[ECSS]OVERLAY_STRING.TXT;1 copied to HWPVSB::PVS_USER:[ECSS]OVERLAY_STRING.TXT;29 (506 blocks)
$ submit/remote        HWPVSB::user$disk:[foster]overl_trans.com

******************************
DKA100:[USERS.MGRANNEL]OVERL_TRANS.LOG;5

$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]OVER_ANAL.LOG;1

%DELETE-I-FILDEL, HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 deleted (15 blocks)
%COPY-S-COPIED, USER$DISK:[FOSTER]OVER_ANAL_1.TRP;1 copied to HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 (13 blocks)

******************************
DKA100:[USERS.MGRANNEL]OVER_SLAVE.LOG;14

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ thisnode = "HWPVSD"
$ IF thisnode .EQS. "HWPVSA" .OR. thisnode .EQS. "HWPVSB" THEN printer="TTE4:"
$ IF thisnode .EQS. "HWPVSD" .OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]PRINT_ANAL.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ thisnode = "HWPVSD"
$ IF "HWPVSD" .EQS. "HWPVSB" THEN printer="TTE4:"
$ if "HWPVSD" .eqs. "HWPVSD" -
.OR. "HWPVSD" .eqs. "HWPVSE" then printer="LTA2113:"
$ thisnode = "HWPVSD"
$ IF thisnode .EQS. "HWPVSD" -
.OR. thisnode .EQS. "HWPVSE" THEN printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]TEMPREPSUPAB.LOG;9

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSB::"
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSD" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSE" then GOSUB NEW
$ if f$trnlnm ("pvslocal") .eqs. "HWPVSA" .or. f$trnlnm ("pvslocal") .eqs. -
"HWPVSB" then GOSUB OLD
$ copy/log	court:rep*.tmp,rep*.txt		HWPVSB::user$disk:[court]
%COPY-S-COPIED, USER$DISK:[COURT]REP253.TMP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP253.TMP;2 (2 blocks)
%COPY-S-COPIED, USER$DISK:[COURT]REP2532.TMP;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP2532.TMP;2 (3 blocks)
%COPY-S-COPIED, USER$DISK:[COURT]REP301.TMP;1 copied to 
HWPVSB::SYS$SYSDEVICE:[COURT]REP5991.TXT;2 (25 blocks)
%COPY-S-COPIED, USER$DISK:[COURT]REP5992.TXT;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]REP5992.TXT;2 (14 blocks)
$ copy/log	court:temprepsupab.com		HWPVSB::user$disk:[court]
%COPY-S-COPIED, USER$DISK:[COURT]TEMPREPSUPAB.COM;1 copied to HWPVSB::SYS$SYSDEVICE:[COURT]TEMPREPSUPAB.COM;2 (15 blocks)
$ submit/remote		HWPVSB::user$disk:[court]temprepsupab.com

******************************
DKA100:[USERS.MGRANNEL]UNNUMSOLVEC.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"

******************************
DKA100:[USERS.MGRANNEL]UNSOLD.LOG;1

$    nodename = "HWPVSD"
$    thisnode       == "HWPVSD"
$    othernode      == "HWPVSE::"
$ IF "HWPVSD::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSD::" .eqs. "HWPVSD::" -
.OR. "HWPVSD::" .eqs. "HWPVSE::" then printer="LTA2113:"

******************************
DKA100:[USERS.MGRANNEL]UPDATECONFIG.LOG;1

$ if thisnode .eqs. "_HWPVSA::" then othernode = "HWPVSB::"
$ if thisnode .eqs. "_HWPVSB::" then othernode = "HWPVSA::"
$ copy/log	foster:block.tmp	HWPVSA::config:block.trp
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]BLOCK.TMP;1 copied to HWPVSA::PVS_DATA:[CONFIG]BLOCK.TRP;2 (1 block)
$ copy/log	foster:3dr.tmp		HWPVSA::config:3dr.trp
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]3DR.TMP;1 copied to HWPVSA::PVS_DATA:[CONFIG]3DR.TRP;2 (1 block)
$ copy/log	foster:5dr.tmp		HWPVSA::config:5dr.trp
%COPY-S-COPIED, SYS$SYSDEVICE:[FOSTER]5DR.TMP;1 copied to HWPVSA::PVS_DATA:[CONFIG]5DR.TRP;2 (1 block)

******************************
DKA100:[USERS.MURRELL]NETSERVER.LOG;1001

            from remote process HWPVS1::"0=$AMURREL1"
            from remote process HWPVS1::"0=$AMURREL1"

******************************
DKA100:[USERS.MURRELL]WATMESSAGE.LOG;4

%RENAME-I-RENAMED, PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2;1 renamed to PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2_SAV;1

******************************
DKA100:[USERS.OLDUSERS.DARWIN]NETSERVER.LOG;2

            from remote process HWPVS1::"0=DARWIN"

******************************
DKA100:[USERS.OLDUSERS.HELSBY]ASEQ.LOG;669

NODE : HWPVS2

******************************
DKA100:[USERS.OLDUSERS.HELSBY]NETSERVER.LOG;1735

            from remote process HWPVS2::"0=GHELSBY"
            from remote process HWPVS2::"0=GHELSBY"

******************************
DKA100:[USERS.OLDUSERS.INGLESFIELD]NETSERVER.LOG;157

            from remote process HWPVS2::"0=INGLESFIELD"

******************************
DKA100:[USERS.OLDUSERS.MCKENZIE]ASEQ.LOG;39

NODE : HWPVS1

******************************
DKA100:[USERS.OLDUSERS.MCKENZIE]NETSERVER.LOG;282

            from remote process HWPVS1::"0=THOMPSON"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]ASEQ.LOG;3

NODE : HWPVS2

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]NETSERVER.LOG;465

            from remote process HWPVS2::"0=DMCDERMO"

******************************
DKA100:[USERS.OLDUSERS.PJGRAY]OVER_ANAL.LOG;51

%COPY-S-COPIED, USER$DISK:[FOSTER]OVER_ANAL_1.TRP;1 copied to HWPVS1::PVS_SPECIFIC:[T]OVER_ANAL_1.TRP;1 (10 blocks)

******************************
DKA100:[USERS.OPERATOR]ASEQ.LOG;1

NODE : HWPVS2

******************************
DKA100:[USERS.OPERATOR]NETSERVER.LOG;32767

            from remote process HWPVS2::"0=$RALLEN17"
            from remote process HWPVS2::"0=$RALLEN17"
            from remote process HWPVS2::"0=$RALLEN17"
            from remote process HWPVS2::"0=$RALLEN17"

******************************
DKA100:[USERS.OPERATOR]UCX$FTPD.LOG;2389

		UCX$FTPD server started on 
		HWPVS1.jaguar.ford.com	22-JAN-2014 14:27:20.74

%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MT 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MT 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MTAT;1 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MT 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MTPVS1$DKA0:[MTF.DATA]004178_0000_FLAG2.DAT;1 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MT 
%UCX-I-FTP_OBJ, Object : HWPVS1$DKA0:[MT 

******************************
DKA100:[USERS.OPERATOR]WATMESSAGE.LOG;130

%RENAME-I-RENAMED, PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2;1 renamed to PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2_SAV;1

******************************
DKA100:[USERS.PHOYTE]ASEQ.LOG;1

NODE : HWPVS2

******************************
DKA100:[USERS.PHOYTE]NETSERVER.LOG;229

            from remote process HWPVS2::"0=PHOYTE"
            from remote process HWPVS2::"0=PHOYTE"

******************************
DKA100:[USERS.PORTAL]$.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
From:	HWPVS1::$RALLEN17   
To:	HWPVS2::$GWILKIN8,HWPVS2::$PTRAYNOR,HWPVS2::$MDELANE2,HWPVS2::MDELANE2,HWPVS2::PTRAYNOR,HWPVS2::GWILKIN8,HWPVS1::$GWILKIN8,HWPVS1::$PTRAYNOR,HWPVS1::$MDELANE2,HWPVS1::MDELANE2,HWPVS1::PTRAYNOR, 
******************************
DKA100:[USERS.PORTAL]$AHOUGHTO.LOG;7

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$AMAHAJA2.LOG;2

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
13070804100454_$RALLEN17.UCX_HWPVS1;1
13070804100454_$RALLEN17.UCX_HWPVS1_TEXT;1
13070904300158_$RALLEN17.UCX_HWPVS1;1
13070904300158_$RALLEN17.UCX_HWPVS1_TEXT;1
13072304300168_$RALLEN17.UCX_HWPVS1_TEXT;1
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$AMURREL.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]$AMURREL1.LOG;164

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<NUL>HWPVS1 -> ilvs 
<NUL>HWPVS1 -> pvs 
<NUL>HWPVS1 -> ilvs 
<NUL>HWPVS1 -> edit ilvsanalysis:solve_e.dat 
<NUL>HWPVS1 -> <STX>
<NUL><NUL><NUL>HWPVS1 -> edit analysis:solvee.trp 
<NUL>HWPVS1 -> <STX>
<NUL><NUL><NUL>HWPVS1 -> edit ilvsconfig:scis.txt 
HWPVS1::Murrell 11:48:47   (DCL)   CPU=00:00:02.40 PF=17575 IO=3091 MEM=227
<NUL>HWPVS1 -> lo 

******************************
DKA100:[USERS.PORTAL]$DCO9SSON.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
                      <ESC>[7m STATUS OF DISKS ON NODE HWPVS1 <ESC>[0m
OpenVMS V6.2  on node HWPVS1  27-NOV-2013 17:18:47.17  Uptime  8 00:28:54
00000213 SMTP_HWPVS1_01  LEF      5    78687   0 00:00:21.48      2140   1951   

******************************
DKA100:[USERS.PORTAL]$DCONSSON.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$DCOSSON.LOG;72

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1;1f<ESC>[J<ESC>[2;30fProcess <ESC>[6;5fState<ESC>[8;5fCur/base priority<ESC>[10;5fCurrent PC<ESC>[12;5fCurrent PSL<ESC>[14;5fCurrent user SP<ESC>[16;5fPID<ESC>[16;25f00000BD5<ESC>[18;5fUIC<ESC>[6;45fWorking set<ESC>[8;45fVirtual pages<ESC>[10;45fCPU time<ESC>[12;45fDirect I/O<ESC>[14;45fBuffered I/O<ESC>[16;45fPage faults<ESC>[18;45fEvent flags<ESC>[2;65f20:58:49<ESC>[2;38fMTF_HANDLER    <ESC>[22;5fHWPVS1$DKA0:[MTF]MTF.EXE;1<ESC>[K<ESC>[6;25fHIB   <ESC>[8;24f10/<ESC>[8;27f8<ESC>[10;25f7FFEDF8A<ESC>[12;25f03C00000<ESC>[14;25f7FECE728<ESC>[18;9f                                   <ESC>[19;11f
<ESC>[1;1f<ESC>[J<ESC>[2;30fProcess <ESC>[6;5fState<ESC>[8;5fCur/base priority<ESC>[10;5fCurrent PC<ESC>[12;5fCurrent PSL<ESC>[14;5fCurrent user SP<ESC>[16;5fPID<ESC>[16;25f00000BD5<ESC>[18;5fUIC<ESC>[6;45fWorking set<ESC>[8;45fVirtual pages<ESC>[10;45fCPU time<ESC>[12;45fDirect I/O<ESC>[14;45fBuffered I/O<ESC>[16;45fPage faults<ESC>[18;45fEvent flags<ESC>[2;65f21:00:52<ESC>[2;38fMTF_HANDLER    <ESC>[22;5fHWPVS1$DKA0:[MTF]MTF.EXE;1<ESC>[K<ESC>[6;25fHIB   <ESC>[8;24f12/<ESC>[8;27f8<ESC>[10;25f7FFEDF8A<ESC>[12;25f03C00000<ESC>[14;25f7FECE728<ESC>[18;9f                                   <ESC>[19;11f
                      <ESC>[7m STATUS OF DISKS ON NODE HWPVS1 <ESC>[0m
                          Node: HWPVS1           Process name: "MTF_HANDLER"
 SYS$NODE_HWPVS1                   

168 lines read from file HWPVS1$DKA0:[MTF]MTF.COM;2

******************************
DKA100:[USERS.PORTAL]$DMACDO21.LOG;9

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$GWILKIN.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
Access:        Remote                  Current Service:             HWPVS1
Status:     Connected                  Current Node:                HWPVS1
Access:        Remote                  Current Service:             HWPVS1
Status:     Connected                  Current Node:                HWPVS1

******************************
DKA100:[USERS.PORTAL]$GWILKIN8.LOG;53

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]$ITAYLOR.LOG;34

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 920
CHECK_SYSTEM ANALYSIS 24-FEB-2012 10:25:30.36 on HWPVS1 which is MASTER
  3      38.128 (HWPVS1)   000A44E3  _TNA4928:         16388  CTERM

HWPVS1$DKA0:            Mounted              0  PVS            3109880   106   1
HWPVS1$DKA100:          Mounted              0  OPENVMS062     2979522   361   1
HWPVS1$DKA200:          Mounted              0  ILVS           3984291   269   1
HWPVS1$DKA400:          Online wrtlck        0
HWPVS1$DKB100:          Online               0
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2

******************************
DKA100:[USERS.PORTAL]$MCHAUDH1.LOG;6

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$MCORCORAN.LOG;8

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$MDELANE2.LOG;35

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 925
CHECK_SYSTEM ANALYSIS  8-MAR-2012 04:04:33.33 on HWPVS1 which is MASTER
  24759  38.128 (HWPVS1)   000D506D  PORTAL            24760  CTERM
  24760  38.128 (HWPVS1)   00000210  REMACP            24759  PORTAL
  24692  38.129 (HWPVS2)   000C98FD  H$WATCHDOG        16501  $MDELANE2
  8309   38.129 (HWPVS2)   000C6D01  H$DUPLEX          16502  $MDELANE2
  8311   38.129 (HWPVS2)   000C80F3  05_Duplex         16504  PVSDUPLEX
  8312   38.129 (HWPVS2)   000C82F7  09_Watchdog       16505  PVSWATCH
HWPVS1$DKA0:            Mounted              0  PVS            3369200    90   1
HWPVS1$DKA100:          Mounted              0  OPENVMS062     2815443   344   1
HWPVS1$DKA200:          Mounted              0  ILVS           4010841   240   1
HWPVS1$DKA400:          Online wrtlck        0
HWPVS1$DKB100:          Online               0
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2

******************************
DKA100:[USERS.PORTAL]$MFOSTER5.LOG;4

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$MWHITE15.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 909
CHECK_SYSTEM ANALYSIS 31-MAR-2012 07:35:13.69 on HWPVS1 which is MASTER
  24621  38.128 (HWPVS1)   000F51D9  PORTAL            24622  CTERM
  24622  38.128 (HWPVS1)   00000210  REMACP            24621  PORTAL
  16581  38.128 (HWPVS1)   00094372  _TNA8399:          8390  CTERM
  8390   38.128 (HWPVS1)   00000210  REMACP            16581  PORTAL
  16552  38.129 (HWPVS2)   000C98FD  H$WATCHDOG         8523  $MDELANE2
  8362   38.129 (HWPVS2)   000C6D01  H$DUPLEX           8525  $MDELANE2
  24749  38.129 (HWPVS2)   000C80F3  05_Duplex          8528  PVSDUPLEX
  24750  38.129 (HWPVS2)   000C82F7  09_Watchdog        8529  PVSWATCH
  24772  38.129 (HWPVS2)   0009456F  PVSUSER           16725  CTERM
HWPVS1$DKA0:            Mounted              0  PVS            3323232   178   1
HWPVS1$DKA100:          Mounted              0  OPENVMS062     2562264   377   1
HWPVS1$DKA200:          Mounted              0  ILVS           3792996   323   1
HWPVS1$DKA400:          Online wrtlck        0
HWPVS1$DKB100:          Online               0
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$PKEAVENEY.LOG;2

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$PTRATY.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
From:	HWPVS1::$RALLEN17   
To:
--------------------------------------------------------------------------------<ESC>[0m<ESC>[2J<ESC>#6   SYSTEM INFORMATION on <HWPVS1::>  <ESC>[0m
remote node name:                   HWPVS2::
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2

******************************
DKA100:[USERS.PORTAL]$PTRAYNIOR.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 908
CHECK_SYSTEM ANALYSIS 18-OCT-2011 22:09:43.91 on HWPVS1 which is MASTER

******************************
DKA100:[USERS.PORTAL]$PTRAYNOR.LOG;327

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 908
******************************
DKA100:[USERS.PORTAL]$RALLEN17.LOG;194

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]$RASLLEN17.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<NUL>1$ set host hwpvs2 
<ESC>#3            HWPVS2 - SLAVE
<ESC>#4            HWPVS2 - SLAVE
<ESC>#3            HWPVS2 - SLAVE
<ESC>#4            HWPVS2 - SLAVE
%REM-S-END, control returned to node HWPVS2::
%REM-S-END, control returned to node HWPVS1::

******************************
DKA100:[USERS.PORTAL]$RKANKANA.LOG;12

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
Directory HWPVS1$DKA0:[MTF.DATA]
Directory HWPVS1$DKA0:[MTF.DATA]
******************************
DKA100:[USERS.PORTAL]$RTHANGAV.LOG;2

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]$RUNDERWO.LOG;38

<ESC>#3        HWPVS1 - PVS not running
<ESC>#4        HWPVS1 - PVS not running
   You Are Logged Onto HWPVS1 The TEST  SERVER
<NUL>T-HWPVS1$vobmend 
Stopping TRIPOS on node HWPVS1::
<NUL>T-HWPVS1$runpvs master 
OpenVMS V6.2  on node HWPVS1  30-JAN-2014 10:16:27.68  Uptime  0 01:07:14
00000214 SMTP_HWPVS1_01  HIB      4      490   0 00:00:00.15      1109    938   
Starting PVS on node HWPVS1::
<NUL>T-HWPVS1$link on 
<NUL>T-HWPVS1$pvs 
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<NUL>T-HWPVS1$link off 
<NUL>T-HWPVS1$<STX>
<NUL><NUL><NUL>T-HWPVS1$watch 
<NUL>T-HWPVS1$<STX>
<NUL><NUL><NUL>T-HWPVS1$watch 
<NUL>T-HWPVS1$<STX>
<NUL><NUL><NUL>T-HWPVS1$watch 
<NUL>T-HWPVS1$<STX>
<NUL><NUL><NUL>T-HWPVS1$watch 
<NUL>T-HWPVS1$link on 
<NUL>T-HWPVS1$pvs 
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<NUL>T-HWPVS1$watch 
<NUL>T-HWPVS1$showlink 
  8360   38.126 (HWPVS1)   0000025F  _TNA4:             8361  CTERM
  8361   38.126 (HWPVS1)   00000210  REMACP             8360  PORTAL
  8367   38.284 (HWPVS2)   0000026D  H$WATCHDOG          269  ILVS_WDNET
  8368   38.284 (HWPVS2)   00000271  H$DUPLEX            270  ILVS_DPXHDLE
  8369   38.284 (HWPVS2)   0000028A  Remotesetmaster     271  $RUNDERWO
  8374   38.284 (HWPVS2)   00000264  05_Duplex           276  PVSDUPLEX
  8375   38.284 (HWPVS2)   00000268  09_Watchdog         277  PVSWATCH
<NUL>T-HWPVS1$ 
<NUL>T-HWPVS1$ 
<NUL>T-HWPVS1$sh proc 
                          Node: HWPVS1           Process name: "R Underwood (1)"
Terminal:           RTA2:  (HWPVS1::PORTAL)
Devices allocated:  HWPVS1$RTA2:
<NUL>T-HWPVS1$dir sys$manager:operator.log 
<NUL>T-HWPVS1$<STX>
<NUL><NUL><NUL>T-HWPVS1$edit/edt/read sys$manager:operator.log;-1 

******************************
DKA100:[USERS.PORTAL]$SKENYANI.LOG;47

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]$SSONI2.LOG;1

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE

******************************
DKA100:[USERS.PORTAL]$YMISHRA1.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]4PTRAYNOR.LOG;5

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 928
HWPVS1$DKB100:          Online               0
******************************
DKA100:[USERS.PORTAL]AHOUGHTO.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]ASAXBY.LOG;61

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<NUL>T-HWPVS1$w80 
<NUL>T-HWPVS1$<SUB>

******************************
DKA100:[USERS.PORTAL]BBENDICK.LOG;2

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<NUL>HWPVS1 >  
<NUL>HWPVS1 >  
<NUL>HWPVS1 >  
<NUL>HWPVS1 >  
<NUL>HWPVS1 >  
<NUL>HWPVS1 > set pas 
<NUL>HWPVS1 > log 

******************************
DKA100:[USERS.PORTAL]CLEWI157.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER

******************************
DKA100:[USERS.PORTAL]DCOSSON.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]ETENANT.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<NUL>HWPVS1>cli 
<NUL>HWPVS1><STX>
<NUL><NUL><NUL>HWPVS1>cli 
<NUL>HWPVS1>show log mon* 
<NUL>HWPVS1>cd monitor_source 
<NUL>HWPVS1>w 
<NUL>HWPVS1>dir 
<NUL>HWPVS1>run monitor 
<NUL>HWPVS1>cli 
<NUL>HWPVS1>show log mon* 
<NUL>HWPVS1>pvs 
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<ESC>[1mHWPVS1_MASTER > <ESC>[0m
<NUL>HWPVS1>logout 

******************************
DKA100:[USERS.PORTAL]ETENNANT.LOG;55

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<NUL>HWPVS1>pvs 
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]ETENNANTA.LOG;1

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<NUL>HWPVS1>pvs 
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<NUL>HWPVS1>logout 

******************************
DKA100:[USERS.PORTAL]ETENNNAT.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<NUL>HWPVS1>cli 
<NUL>HWPVS1>logout 

******************************
DKA100:[USERS.PORTAL]GARCIA600.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
YOU ARE ON HWPVS1.  LAST REBOOTED 27-DEC-2007 16:12:21.41
HWPVS1$DKA0:            Mounted              0  PVS            7358336   143   1
HWPVS1$DKA100:          Mounted              0  OPENVMS062     4231584   372   1
HWPVS1$DKA200:          Mounted              0  ILVS           6648280   255   1
HWPVS1$DKA400:          Online wrtlck        0
HWPVS1$DKB100:          Online               0

DKA100:[USERS.PORTAL]HEINLEIN.LOG;5

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<NUL><ESC>[1mHWPVS1$ <ESC>[msh us 
<NUL><ESC>[1mHWPVS1$ <ESC>[m 
<NUL><ESC>[1mHWPVS1$ <ESC>[milvs 
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
Remote Node is HWPVS2
<NUL><ESC>[1mHWPVS1$ <ESC>[msh us 
<NUL><ESC>[1mHWPVS1$ <ESC>[mset hos hwpvs2 
<ESC>#3            HWPVS2 - MASTER
<ESC>#4            HWPVS2 - MASTER
<ESC>#3            HWPVS2 - MASTER
<ESC>#4            HWPVS2 - MASTER
<NUL><ESC>[1mHWPVS2$ <ESC>[m 
<NUL><ESC>[1mHWPVS2$ <ESC>[m 
<NUL><ESC>[1mHWPVS2$ <ESC>[msh us 
<NUL><ESC>[1mHWPVS2$ <ESC>[milvs 
Remote Node is HWPVS1
<NUL><ESC>[1mHWPVS2$ <ESC>[msear msglog saxby 
******************************
DKA100:[USERS.PORTAL]JANNING.LOG;6

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
<ESC>#6<CSI>1mHWPVS1 -> System-Status : <CSI>7mMASTER<CSI>m
<NUL>HWPVS1> wide 
<NUL>HWPVS1>d<STX>
<NUL><NUL><NUL>HWPVS1>copy pvstask:watdhand.bpl * 
%REM-S-END, control returned to node HWPVS1::

******************************
DKA100:[USERS.PORTAL]PTRAYNOR.LOG;2

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
YOU ARE ON HWPVS1.  LAST REBOOTED  3-AUG-2010 11:23:22.47
HWPVS1$DKA0:            Mounted              0  PVS            3572440    56   1
DKA100:[USERS.PORTAL]RUNDERWO.LOG;1

<ESC>#3            HWPVS1 - SLAVE
<ESC>#4            HWPVS1 - SLAVE
<ESC>[1mHWPVS1_SLAVE > <ESC>[0m
<ESC>[1;24r<ESC>[24;1H<ESC>[1mHWPVS1_SLAVE > <ESC>[0m

******************************
DKA100:[USERS.PORTAL]SCOTS2472.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
WELCOME TO HWPVS1.*
 HWPVS1 Pre Vector Memory is OK, count is 921

******************************
DKA100:[USERS.PORTAL]SUAMICO2.LOG;1

<ESC>#3        HWPVS1 - PVS not running
<ESC>#4        HWPVS1 - PVS not running
%DELETE-I-FILDEL, PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS1;1 deleted (8 blocks)
%DELETE-I-FILDEL, PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2_SAV;1 deleted (8 blocks)
OpenVMS V6.2  on node HWPVS1   9-OCT-2013 11:06:50.45  Uptime  0 00:15:59
00000213 SMTP_HWPVS1_01  LEF      4      247   0 00:00:00.11       987    776   
******************************
DKA100:[USERS.PORTAL]SYSTEM.LOG;1

<ESC>#3            HWPVS1 - MASTER
<ESC>#4            HWPVS1 - MASTER
HWPVS1$MKA500:          Online               1
<NUL>1$ init hwpvs1$mka500: test 
Magtape HWPVS1$MKA500:, device type TZ89, is online, file-oriented device, error

******************************
DKA100:[USERS.PVS_STARTUP]SYSTARTUP_ILVS.LOG;870

  NODENAME = "HWPVS1"

******************************
DKA100:[USERS.PVS_STARTUP]SYSTARTUP_PVS.LOG;872

  "PVS_COMMON" = "HWPVS1$DKA0:[PVS$COMMON.]"
  "PVS_DATA" = "HWPVS1$DKA0:[PVS1$SPECIFIC.PVSDATA.]"
  "PVS_SOURCE" = "HWPVS1$DKA0:[PVS$COMMON.PVSSOURCE.]"
  "PVS_SPECIFIC" = "HWPVS1$DKA0:[PVS1$SPECIFIC.]"
  "PVS_SYS" = "HWPVS1$DKA0:[PVS$COMMON.PVSSYS.]"
  "PVS_USER" = "HWPVS1$DKA0:[PVS1$SPECIFIC.PVSUSER.]"
node HWPVS1::  duplexed with  HWPVS2::

******************************
DKA100:[USERS.THAKKAR]NETSERVER.LOG;2

            from remote process HWPVS1::"0=$MTHAKKAR"

******************************
DKA100:[USERS.THOMPSON]ASEQ.LOG;689

NODE : HWPVS2

******************************
DKA100:[USERS.THOMPSON]NETSERVER.LOG;2214

            from remote process HWPVS2::"0=JTHOMP14"
            from remote process HWPVS2::"0=JTHOMP14"

******************************
DKA100:[USERS.UNDERWOOD]NETSERVER.LOG;92

            from remote process HWPVS2::"0=$RUNDERWO"
       ucx set interface zea0 /host=hwpvs /network=255.255.254.0

******************************
DKA100:[USERS.UNDERWOOD]WATMESSAGE.LOG;2

%RENAME-I-RENAMED, PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2;1 renamed to PVS_SPECIFIC:[T]WATMESSAGE.TRP_HWPVS2_SAV;1

******************************
DKA100:[VSCT.LOG]SCT1.LOG;49

FTPHWPVS    |  50|  7-MAR-2003|  6-JUN-2007|     0|     (none)|    7-MAR-2003

******************************
DKA100:[VSCT.LOG]SCT4.LOG;44

23-OCT-2006 10:58:12.52 AUDIT      AUDIT_LOG_FIRST  HWPVS1              00000000 
23-OCT-2006 15:45:00.46 LOGFAIL    REMOTE           HWPVS1 JTHOMP14     00005AC8 haj1002ms0w1j.jaguar.ford.com
24-OCT-2006 06:19:46.20 LOGFAIL    REMOTE           HWPVS1 <login>      000063A0 









DKA100 – TRP Files



******************************
DKA100:[USERS.FOSTER]LOG_HELP.TRP;1

$ thisnode      ==      "HWPVSB"
$ othernode     ==	"HWPVSD::"
$ IF "HWPVSB::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSB::" .eqs. "HWPVSD::" -
.OR. "HWPVSB::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ thisnode = "HWPVSB"
$ IF "HWPVSB" .EQS. "HWPVSB" THEN GOTO TRANSMISSION

******************************
DKA100:[USERS.MGRANNEL]LOG_HELP.TRP;1

$ thisnode      ==      "HWPVSB"
$ othernode     ==	"HWPVSD::"
$ IF "HWPVSB::" .EQS. "HWPVSB::" THEN printer="TTE4:"
$ if "HWPVSB::" .eqs. "HWPVSD::" -
.OR. "HWPVSB::" .eqs. "HWPVSE::" then printer="LTA2113:"
$ thisnode = "HWPVSB"
$ IF "HWPVSB" .EQS. "HWPVSB" THEN GOTO TRANSMISSION

DKA100 – Files Named HWPVS Something


Directory DKA100:[SYS0.SYSCOMMON.SYSEXE]

SYSTEM$HWPVS2.LM$JOURNAL;1              

Total of 1 file.

Directory DKA100:[SYS0.SYSMGR]

CLUE$LAST_HWPVS1.LIS;1                  CLUE$LAST_HWPVS2.LIS;1

Total of 2 files.

Directory DKA100:[SYSE.SYSCOMMON.SYSEXE]

SYSTEM$HWPVS2.LM$JOURNAL;1              

Total of 1 file.

Directory DKA100:[USERS.ELLIOTT.CHECK]

DKA0_FILES_NAMED_HWPVS.TXT;1            DKA100_FILES_NAMED_HWPVS.TXT;1

Total of 2 files.

Directory DKA100:[USERS.FOSTER]

HWPVSE.COM;2        

Total of 1 file.

Directory DKA100:[USERS.MGRANNEL]

HWPVSE.COM;2        

Total of 1 file.

Directory DKA100:[VMS$COMMON.SYSEXE]

SYSTEM$HWPVS2.LM$JOURNAL;1              

Total of 1 file.

Grand total of 7 directories, 9 files.








DKA200 – COM Files


******************************
DKA200:[ILVS.ILVSSOURCE.ILVSCOMM]ILVS_LOGICALS.COM;63

$!                                       add HWPVS
$  IF "''nodename'" .EQS. "HWPVS1::" .OR. "''nodename'" .EQS. "HWPVS2::"
$       IF "''nodename'" .EQS. "HWPVS1::"
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS2
$	  DEFINE/TABLE='TARGETTABLE' DPXNODE HWPVS1

******************************
DKA200:[ILVS.ILVSSOURCE.ILVSCOMM]NEWQQQWOW.COM;74

		  F$EXTRACT ( 0, 5, this_node) .EQS. "HWPVS"
		 F$EXTRACT( 0, 5, this_node) .EQS. "HWPVS"

******************************
DKA200:[ILVS.ILVSUSER.ILVSREPORT]WEBREPORT.COM;41

$	write ftp_file "hauls01""hwpvs hauls01""::""/ford/thishost/proj/ilvs/web/reports/rep''rep_no'.htm"" "
$!       write ftp_file "hwpvs"                      !send 

******************************
DKA200:[ILVS.ILVSUSER.ILVSREPORT]WEBREPORT_HOURLY.COM;2

$	write ftp_file "hauls01""hwpvs hauls01""::""/ford/thishost/proj/ilvs/web/reports/rep''rep_no'.htm"" "

******************************
DKA200:[PBISSCHO]LOGIN.COM;4

$ write sys$output "Welcome Petran to HWPVS1"




DKA200 – Log Files


******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]LOAD_ORDER.LOG;3660

%COPY-S-COPIED, ILVS_SYS:[ILVSLOG]LORD.LOG;11 copied to HWPVS2::ILVS_SYS:[ILVSLOG]LORD.LOG;11 (2 blocks)

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG140108.LOG;1

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140110.LOG;1

14/01/10-00:06 (M)HWPVS1::BATCH_131       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=050114.
14/01/10-00:06 (M)HWPVS1::BATCH_131       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/10-00:06 (M)HWPVS1::BATCH_131       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=050114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140111.LOG;1

14/01/11-00:06 (M)HWPVS1::BATCH_424       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=060114.
14/01/11-00:06 (M)HWPVS1::BATCH_424       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/11-00:06 (M)HWPVS1::BATCH_424       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=060114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140112.LOG;1

14/01/12-00:06 (M)HWPVS1::BATCH_695       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=070114.
14/01/12-00:06 (M)HWPVS1::BATCH_695       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/12-00:06 (M)HWPVS1::BATCH_695       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=070114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140113.LOG;1

14/01/13-00:06 (M)HWPVS1::BATCH_921       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=080114.
14/01/13-00:06 (M)HWPVS1::BATCH_921       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/13-00:06 (M)HWPVS1::BATCH_921       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=080114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140114.LOG;1

14/01/14-00:06 (M)HWPVS1::BATCH_191       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=090114.
14/01/14-00:06 (M)HWPVS1::BATCH_191       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/14-00:06 (M)HWPVS1::BATCH_191       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=090114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140115.LOG;1

14/01/15-00:06 (M)HWPVS1::BATCH_579       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=100114.
14/01/15-00:06 (M)HWPVS1::BATCH_579       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/15-00:06 (M)HWPVS1::BATCH_579       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=100114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140116.LOG;1

14/01/16-00:06 (M)HWPVS1::BATCH_833       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=110114.
14/01/16-00:06 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  SUB_EDIT_SCRAP_VEH: configuration last_used = 10382. 
14/01/16-00:06 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  SUB_EDIT_SCRAP_VEH: global section last_used = 10382. 
14/01/16-00:06 (M)HWPVS1::H$SUBSTITUTION  %SUBSTITUT-I-SCRAP_VEH_REQUE,  SCRAP_VEH requested: ECSS Record 3311179116.
14/01/16-00:06 (M)HWPVS1::BATCH_833       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/16-00:06 (M)HWPVS1::BATCH_833       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=110114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140118.LOG;1

14/01/18-00:06 (M)HWPVS1::BATCH_331       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=130114.
14/01/18-00:06 (M)HWPVS1::BATCH_331       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/18-00:06 (M)HWPVS1::BATCH_331       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=130114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140119.LOG;1

14/01/19-00:06 (M)HWPVS1::BATCH_558       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=140114.
14/01/19-00:06 (M)HWPVS1::BATCH_558       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/19-00:06 (M)HWPVS1::BATCH_558       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=140114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140121.LOG;1

14/01/21-00:06 (M)HWPVS1::BATCH_991       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=160114.
14/01/21-00:06 (M)HWPVS1::BATCH_991       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/21-00:06 (M)HWPVS1::BATCH_991       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=160114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140122.LOG;1

14/01/22-00:06 (M)HWPVS1::BATCH_223       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=170114.
14/01/22-00:06 (M)HWPVS1::BATCH_223       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/22-00:06 (M)HWPVS1::BATCH_223       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=170114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140123.LOG;1

14/01/23-00:06 (M)HWPVS1::BATCH_456       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=180114.
14/01/23-00:06 (M)HWPVS1::BATCH_456       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/23-00:06 (M)HWPVS1::BATCH_456       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=180114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140124.LOG;1

14/01/24-00:06 (M)HWPVS1::BATCH_710       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=190114.
14/01/24-00:06 (M)HWPVS1::BATCH_710       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/24-00:06 (M)HWPVS1::BATCH_710       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=190114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140125.LOG;1

14/01/25-00:06 (M)HWPVS1::BATCH_976       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=200114.
14/01/25-00:06 (M)HWPVS1::BATCH_976       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/25-00:06 (M)HWPVS1::BATCH_976       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=200114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140126.LOG;1

14/01/26-00:06 (M)HWPVS1::BATCH_246       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=210114.
14/01/26-00:06 (M)HWPVS1::BATCH_246       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/26-00:06 (M)HWPVS1::BATCH_246       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=210114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140127.LOG;1

14/01/27-00:06 (M)HWPVS1::BATCH_470       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=220114.
14/01/27-00:06 (M)HWPVS1::BATCH_470       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/27-00:06 (M)HWPVS1::BATCH_470       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=220114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140128.LOG;1

14/01/28-00:06 (M)HWPVS1::BATCH_741       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=230114.
14/01/28-00:06 (M)HWPVS1::BATCH_741       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/28-00:06 (M)HWPVS1::BATCH_741       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=230114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140129.LOG;1

14/01/29-00:06 (M)HWPVS1::BATCH_995       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=240114.
14/01/29-00:06 (M)HWPVS1::BATCH_995       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/29-00:06 (M)HWPVS1::BATCH_995       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=240114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140130.LOG;1

14/01/30-00:06 (M)HWPVS1::BATCH_249       %ILVS_CI-I-USER_CALL_FUNCT, User $RALLEN17    calls function CLEAR_VDB/DELETE/DATE=250114.
14/01/30-00:06 (M)HWPVS1::BATCH_249       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/30-00:06 (M)HWPVS1::BATCH_249       %ILVS_CI-I-USER_END_FUNCTI, User $RALLEN17    ends function CLEAR_VDB/DELETE/DATE=250114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140131.LOG;1

14/01/31-00:06 (M)HWPVS1::BATCH_669       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=260114.
14/01/31-00:06 (M)HWPVS1::BATCH_669       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/01/31-00:06 (M)HWPVS1::BATCH_669       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=260114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140201.LOG;1

14/02/01-00:06 (M)HWPVS1::BATCH_932       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=270114.
14/02/01-00:06 (M)HWPVS1::BATCH_932       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/01-00:06 (M)HWPVS1::BATCH_932       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=270114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140202.LOG;1

14/02/02-00:06 (M)HWPVS1::BATCH_224       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=280114.
14/02/02-00:06 (M)HWPVS1::BATCH_224       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/02-00:06 (M)HWPVS1::BATCH_224       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=280114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140203.LOG;1

14/02/03-00:06 (M)HWPVS1::BATCH_470       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=290114.
14/02/03-00:06 (M)HWPVS1::BATCH_470       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/03-00:06 (M)HWPVS1::BATCH_470       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=290114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140204.LOG;1

14/02/04-00:06 (M)HWPVS1::BATCH_761       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=300114.
14/02/04-00:06 (M)HWPVS1::BATCH_761       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/04-00:06 (M)HWPVS1::BATCH_761       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=300114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140205.LOG;1

14/02/05-00:06 (M)HWPVS1::BATCH_19        %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=310114.
14/02/05-00:06 (M)HWPVS1::BATCH_19        %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/05-00:06 (M)HWPVS1::BATCH_19        %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=310114 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140206.LOG;1

14/02/06-00:06 (M)HWPVS1::BATCH_273       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=010214.
14/02/06-00:06 (M)HWPVS1::BATCH_273       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/06-00:06 (M)HWPVS1::BATCH_273       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=010214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140207.LOG;1

14/02/07-00:06 (M)HWPVS1::BATCH_525       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=020214.
14/02/07-00:06 (M)HWPVS1::BATCH_525       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/07-00:06 (M)HWPVS1::BATCH_525       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=020214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140208.LOG;1

14/02/08-00:06 (M)HWPVS1::BATCH_788       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=030214.
14/02/08-00:06 (M)HWPVS1::BATCH_788       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/08-00:06 (M)HWPVS1::BATCH_788       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=030214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140209.LOG;1

14/02/09-00:06 (M)HWPVS1::BATCH_59        %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=040214.
14/02/09-00:06 (M)HWPVS1::BATCH_59        %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/09-00:06 (M)HWPVS1::BATCH_59        %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=040214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140210.LOG;1

14/02/10-00:06 (M)HWPVS1::BATCH_283       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=050214.
14/02/10-00:06 (M)HWPVS1::BATCH_283       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/10-00:06 (M)HWPVS1::BATCH_283       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=050214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140211.LOG;1

14/02/11-00:06 (M)HWPVS1::BATCH_553       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=060214.
14/02/11-00:06 (M)HWPVS1::BATCH_553       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/11-00:06 (M)HWPVS1::BATCH_553       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=060214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140212.LOG;1

14/02/12-00:06 (M)HWPVS1::BATCH_807       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=070214.
14/02/12-00:06 (M)HWPVS1::BATCH_807       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/12-00:06 (M)HWPVS1::BATCH_807       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=070214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140213.LOG;1

14/02/13-00:06 (M)HWPVS1::BATCH_62        %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=080214.
14/02/13-00:06 (M)HWPVS1::BATCH_62        %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/13-00:06 (M)HWPVS1::BATCH_62        %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=080214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_CLEARVDB140214.LOG;1

14/02/14-00:06 (M)HWPVS1::BATCH_314       %ILVS_CI-I-USER_CALL_FUNCT, User $RUNDERWO    calls function CLEAR_VDB/DELETE/DATE=090214.
14/02/14-00:06 (M)HWPVS1::BATCH_314       %CLEAR-I-ERR_FILE,  ERRORS are written to File ILVSLOG:CLEAR_VDB.ERR                    
14/02/14-00:06 (M)HWPVS1::BATCH_314       %ILVS_CI-I-USER_END_FUNCTI, User $RUNDERWO    ends function CLEAR_VDB/DELETE/DATE=090214 - Status : %NORMAL.

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_TLS140111.LOG;1

14/01/11-09:49 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: no matching order found for TLSQ number: 3401020464. 
14/01/11-09:56 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: no matching order found for TLSQ number: 3401060464. 

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_TLS140113.LOG;1

14/01/13-21:38 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: TLSQ VJ 3312202775. NOT LOWEST TLSQ. Undelivered TLSQ 3312202740 for ECSS 3401020310. 
14/01/13-21:38 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: allocation flag and new TLS number in memory updated. 
14/01/13-21:38 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: direct updating of SES record ok. 
14/01/13-21:38 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: duplex updating of SES ok . 

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_TLS140114.LOG;1

14/01/14-19:10 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: TLSQ VJ 3312202790. NOT LOWEST TLSQ. Undelivered TLSQ 3312202740 for ECSS 3401020310. 
******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_TLS140115.LOG;1

14/01/15-20:41 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLS: ECSS : 3311179116 - TLS queue id : VJ. 
14/01/15-20:41 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLS: for 
14/01/15-20:43 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: direct updating of SES record ok. 
14/01/15-20:43 (M)HWPVS1::H$SUBSTITUTION  %TESTMSG-I-INFO,  ALLOC_TLSQ: duplex updating of SES ok . 

******************************
DKA200:[ILVS.ILVSSYS.ILVSLOG]MSGLOG_TLS140202.LOG;1

14/02/02-12:00 (M)HWPVS1::H$SUBSTITUTION  %SUBSTITUT-W-NOTMATCH_MIX_CO,  NOTMATCH because of mix constraints 
14/02/02-12:01 (M)HWPVS1::H$SUBSTITUTION  %SUBSTITUT-W-NOTMATCH_MIX_CO,  NOTMATCH because of mix constraints 
14/02/02-12:25 (M)HWPVS1::H$SUBSTITUTION  %SUBSTITUT-W-NOTMATCH_MIX_CO,  











